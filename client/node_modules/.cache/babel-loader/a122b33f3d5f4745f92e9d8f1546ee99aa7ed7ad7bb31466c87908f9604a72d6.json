{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\client\\\\src\\\\components\\\\ModelSTL.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport { Canvas, useFrame, useThree } from '@react-three/fiber';\nimport { OrbitControls } from '@react-three/drei';\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader';\nimport { TextureLoader } from 'three/src/loaders/TextureLoader';\nimport * as THREE from 'three';\nimport { EffectComposer, Bloom, SSAO } from '@react-three/postprocessing';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STLModel = ({\n  url,\n  normalMapUrl\n}) => {\n  _s();\n  const ref = useRef();\n  const {\n    camera,\n    gl\n  } = useThree();\n  const [geometry, setGeometry] = useState(null);\n  const [normalMap, setNormalMap] = useState(null);\n  useEffect(() => {\n    const loader = new STLLoader();\n    loader.load(url, geometry => {\n      geometry.center(); // Центрируем модель\n      setGeometry(geometry);\n\n      // Настройка камеры\n      const box = new THREE.Box3().setFromObject(new THREE.Mesh(geometry));\n      const size = box.getSize(new THREE.Vector3());\n      const maxDim = Math.max(size.x, size.y, size.z);\n      const fov = camera.fov * (Math.PI / 180);\n      let cameraZ = Math.abs(maxDim / 2 / Math.tan(fov / 2));\n      cameraZ *= 1.5; // Увеличиваем значение Z для лучшего обзора\n\n      camera.position.set(0, 0, cameraZ);\n      camera.lookAt(0, 0, 0);\n\n      // Обновление проекции камеры\n      camera.updateProjectionMatrix();\n      gl.render(camera);\n    });\n\n    // Загрузка нормальной карты\n    const textureLoader = new TextureLoader();\n    textureLoader.load(normalMapUrl, texture => {\n      setNormalMap(texture);\n    });\n  }, [url, normalMapUrl, camera, gl]);\n  useFrame((state, delta) => {\n    if (ref.current) {\n      ref.current.rotation.x += delta * 0.1;\n      ref.current.rotation.y += delta * 0.1;\n    }\n  });\n  if (!geometry) return null;\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    geometry: geometry,\n    ref: ref,\n    scale: 1,\n    castShadow: true,\n    receiveShadow: true,\n    children: /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: '#888888' // Нейтральный серый цвет\n      ,\n      metalness: 0.7 // Высокое значение для блеска\n      ,\n      roughness: 0.4 // Среднее значение для гладкой поверхности\n      ,\n      emissive: '#444444' // Темный цвет для контраста\n      ,\n      emissiveIntensity: 0.1 // Умеренное свечение\n      ,\n      normalMap: normalMap // Применяем нормальную карту\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_s(STLModel, \"DsbATMAdJZSDQv8vEPP1/uX6+b4=\", false, function () {\n  return [useThree, useFrame];\n});\n_c = STLModel;\nconst ModelSTL = ({\n  url,\n  normalMapUrl\n}) => {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    shadows: true,\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n      position: [10, 10, 10],\n      intensity: 0.8,\n      castShadow: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n      position: [-10, -10, -10],\n      intensity: 0.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [0, 10, 0],\n      intensity: 0.7\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(STLModel, {\n      url: url,\n      normalMapUrl: normalMapUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(EffectComposer, {\n      children: [/*#__PURE__*/_jsxDEV(Bloom, {\n        luminanceThreshold: 0,\n        luminanceSmoothing: 0.9,\n        intensity: 0.5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SSAO, {\n        samples: 31,\n        radius: 20,\n        intensity: 10,\n        luminanceInfluence: 0.1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n_c2 = ModelSTL;\nexport default ModelSTL;\nvar _c, _c2;\n$RefreshReg$(_c, \"STLModel\");\n$RefreshReg$(_c2, \"ModelSTL\");","map":{"version":3,"names":["React","useRef","useState","useEffect","Canvas","useFrame","useThree","OrbitControls","STLLoader","TextureLoader","THREE","EffectComposer","Bloom","SSAO","jsxDEV","_jsxDEV","STLModel","url","normalMapUrl","_s","ref","camera","gl","geometry","setGeometry","normalMap","setNormalMap","loader","load","center","box","Box3","setFromObject","Mesh","size","getSize","Vector3","maxDim","Math","max","x","y","z","fov","PI","cameraZ","abs","tan","position","set","lookAt","updateProjectionMatrix","render","textureLoader","texture","state","delta","current","rotation","scale","castShadow","receiveShadow","children","color","metalness","roughness","emissive","emissiveIntensity","fileName","_jsxFileName","lineNumber","columnNumber","_c","ModelSTL","shadows","intensity","luminanceThreshold","luminanceSmoothing","samples","radius","luminanceInfluence","_c2","$RefreshReg$"],"sources":["D:/project/client/src/components/ModelSTL.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport { Canvas, useFrame, useThree } from '@react-three/fiber';\r\nimport { OrbitControls } from '@react-three/drei';\r\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader';\r\nimport { TextureLoader } from 'three/src/loaders/TextureLoader';\r\nimport * as THREE from 'three';\r\nimport { EffectComposer, Bloom, SSAO } from '@react-three/postprocessing';\r\n\r\nconst STLModel = ({ url, normalMapUrl }) => {\r\n    const ref = useRef();\r\n    const { camera, gl } = useThree();\r\n    const [geometry, setGeometry] = useState(null);\r\n    const [normalMap, setNormalMap] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const loader = new STLLoader();\r\n        loader.load(url, (geometry) => {\r\n            geometry.center(); // Центрируем модель\r\n            setGeometry(geometry);\r\n\r\n            // Настройка камеры\r\n            const box = new THREE.Box3().setFromObject(new THREE.Mesh(geometry));\r\n            const size = box.getSize(new THREE.Vector3());\r\n            const maxDim = Math.max(size.x, size.y, size.z);\r\n            const fov = camera.fov * (Math.PI / 180);\r\n            let cameraZ = Math.abs(maxDim / 2 / Math.tan(fov / 2));\r\n            cameraZ *= 1.5; // Увеличиваем значение Z для лучшего обзора\r\n\r\n            camera.position.set(0, 0, cameraZ);\r\n            camera.lookAt(0, 0, 0);\r\n\r\n            // Обновление проекции камеры\r\n            camera.updateProjectionMatrix();\r\n            gl.render(camera);\r\n        });\r\n\r\n        // Загрузка нормальной карты\r\n        const textureLoader = new TextureLoader();\r\n        textureLoader.load(normalMapUrl, (texture) => {\r\n            setNormalMap(texture);\r\n        });\r\n    }, [url, normalMapUrl, camera, gl]);\r\n\r\n    useFrame((state, delta) => {\r\n        if (ref.current) {\r\n            ref.current.rotation.x += delta * 0.1;\r\n            ref.current.rotation.y += delta * 0.1;\r\n        }\r\n    });\r\n\r\n    if (!geometry) return null;\r\n\r\n    return (\r\n        <mesh geometry={geometry} ref={ref} scale={1} castShadow receiveShadow>\r\n            <meshStandardMaterial\r\n                color={'#888888'} // Нейтральный серый цвет\r\n                metalness={0.7} // Высокое значение для блеска\r\n                roughness={0.4} // Среднее значение для гладкой поверхности\r\n                emissive={'#444444'} // Темный цвет для контраста\r\n                emissiveIntensity={0.1} // Умеренное свечение\r\n                normalMap={normalMap} // Применяем нормальную карту\r\n            />\r\n        </mesh>\r\n    );\r\n};\r\n\r\nconst ModelSTL = ({ url, normalMapUrl }) => {\r\n    return (\r\n        <Canvas shadows>\r\n            <ambientLight intensity={0.5} />\r\n            <directionalLight position={[10, 10, 10]} intensity={0.8} castShadow />\r\n            <directionalLight position={[-10, -10, -10]} intensity={0.5} />\r\n            <pointLight position={[0, 10, 0]} intensity={0.7} />\r\n            <STLModel url={url} normalMapUrl={normalMapUrl} />\r\n            <OrbitControls />\r\n            <EffectComposer>\r\n                <Bloom luminanceThreshold={0} luminanceSmoothing={0.9} intensity={0.5} />\r\n                <SSAO samples={31} radius={20} intensity={10} luminanceInfluence={0.1} />\r\n            </EffectComposer>\r\n        </Canvas>\r\n    );\r\n};\r\n\r\nexport default ModelSTL;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}