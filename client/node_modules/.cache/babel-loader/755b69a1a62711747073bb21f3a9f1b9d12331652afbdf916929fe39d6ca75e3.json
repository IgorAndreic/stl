{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\client\\\\src\\\\components\\\\TextToSTLForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { createText3DModel, generateSTL, fetchFonts } from '../api/text3dmodels';\nimport './css/TextToSTLForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextToSTLForm = ({\n  setUrl\n}) => {\n  _s();\n  const [text, setText] = useState('');\n  const [fontSize, setFontSize] = useState(100);\n  const [fonts, setFonts] = useState([]);\n  const [selectedFont, setSelectedFont] = useState('');\n  useEffect(() => {\n    const loadFonts = async () => {\n      try {\n        const response = await fetchFonts();\n        setFonts(response.data);\n        if (response.data.length > 0) {\n          setSelectedFont(response.data[0].id);\n        }\n      } catch (error) {\n        console.error('Error fetching fonts:', error);\n      }\n    };\n    loadFonts();\n  }, []);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      const response = await createText3DModel({\n        text,\n        font_size: fontSize,\n        font: selectedFont\n      });\n      const id = response.data.id;\n      const generateResponse = await generateSTL(id, 'generatestl');\n      const fileName = generateResponse.data.filename;\n      setUrl(`http://localhost:8000/media/stlfiles/${fileName}`);\n    } catch (error) {\n      console.error('Error generating STL file:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"text-to-stl-form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"text-input\",\n        children: \"Text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"text-input\",\n        type: \"text\",\n        value: text,\n        onChange: e => setText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"font-size-input\",\n        children: \"Font Size:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"font-size-input\",\n        type: \"number\",\n        value: fontSize,\n        onChange: e => setFontSize(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"font-select\",\n        children: \"Font:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"font-select\",\n        value: selectedFont,\n        onChange: e => setSelectedFont(e.target.value),\n        children: fonts.map(font => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: font.id,\n          children: font.name\n        }, font.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Generate STL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(TextToSTLForm, \"q9rcwjDtDTj+iNdh0YYOSjCjWIw=\");\n_c = TextToSTLForm;\nexport default TextToSTLForm;\nvar _c;\n$RefreshReg$(_c, \"TextToSTLForm\");","map":{"version":3,"names":["React","useState","useEffect","createText3DModel","generateSTL","fetchFonts","jsxDEV","_jsxDEV","TextToSTLForm","setUrl","_s","text","setText","fontSize","setFontSize","fonts","setFonts","selectedFont","setSelectedFont","loadFonts","response","data","length","id","error","console","handleSubmit","event","preventDefault","font_size","font","generateResponse","fileName","filename","className","onSubmit","children","htmlFor","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","map","name","_c","$RefreshReg$"],"sources":["D:/project/client/src/components/TextToSTLForm.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { createText3DModel, generateSTL, fetchFonts } from '../api/text3dmodels';\r\nimport './css/TextToSTLForm.css';\r\n\r\nconst TextToSTLForm = ({ setUrl }) => {\r\n    const [text, setText] = useState('');\r\n    const [fontSize, setFontSize] = useState(100);\r\n    const [fonts, setFonts] = useState([]);\r\n    const [selectedFont, setSelectedFont] = useState('');\r\n\r\n    useEffect(() => {\r\n        const loadFonts = async () => {\r\n            try {\r\n                const response = await fetchFonts();\r\n                setFonts(response.data);\r\n                if (response.data.length > 0) {\r\n                    setSelectedFont(response.data[0].id);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching fonts:', error);\r\n            }\r\n        };\r\n        loadFonts();\r\n    }, []);\r\n\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            const response = await createText3DModel({ text, font_size: fontSize, font: selectedFont });\r\n            const id = response.data.id;\r\n            const generateResponse = await generateSTL(id, 'generatestl');\r\n            const fileName = generateResponse.data.filename;\r\n            setUrl(`http://localhost:8000/media/stlfiles/${fileName}`);\r\n        } catch (error) {\r\n            console.error('Error generating STL file:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form className=\"text-to-stl-form\" onSubmit={handleSubmit}>\r\n            <div>\r\n                <label htmlFor=\"text-input\">Text:</label>\r\n                <input\r\n                    id=\"text-input\"\r\n                    type=\"text\"\r\n                    value={text}\r\n                    onChange={(e) => setText(e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"font-size-input\">Font Size:</label>\r\n                <input\r\n                    id=\"font-size-input\"\r\n                    type=\"number\"\r\n                    value={fontSize}\r\n                    onChange={(e) => setFontSize(e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"font-select\">Font:</label>\r\n                <select\r\n                    id=\"font-select\"\r\n                    value={selectedFont}\r\n                    onChange={(e) => setSelectedFont(e.target.value)}\r\n                >\r\n                    {fonts.map((font) => (\r\n                        <option key={font.id} value={font.id}>\r\n                            {font.name}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n            <button type=\"submit\">Generate STL</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default TextToSTLForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}