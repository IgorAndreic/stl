{"ast":null,"code":"import { Uniform } from \"three\";\nimport { Effect, EffectAttribute, BlendFunction } from \"postprocessing\";\nimport { wrapEffect } from \"../util.js\";\nconst WaterShader = {\n  fragmentShader: `\n  uniform float factor;\n  void mainImage(const in vec4 inputColor, const in vec2 uv, out vec4 outputColor) {\n    vec2 vUv = uv;\n    float frequency = 6.0 * factor;\n    float amplitude = 0.015 * factor;\n    float x = vUv.y * frequency + time * .7; \n    float y = vUv.x * frequency + time * .3;\n    vUv.x += cos(x+y) * amplitude * cos(y);\n    vUv.y += sin(x-y) * amplitude * cos(y);\n    vec4 rgba = texture2D(inputBuffer, vUv);\n    outputColor = rgba;\n  }`\n};\nclass WaterEffectImpl extends Effect {\n  constructor({\n    blendFunction = BlendFunction.NORMAL,\n    factor = 0\n  } = {}) {\n    super(\"WaterEffect\", WaterShader.fragmentShader, {\n      blendFunction,\n      attributes: EffectAttribute.CONVOLUTION,\n      uniforms: /* @__PURE__ */new Map([[\"factor\", new Uniform(factor)]])\n    });\n  }\n}\nconst WaterEffect = wrapEffect(WaterEffectImpl, {\n  blendFunction: BlendFunction.NORMAL\n});\nexport { WaterEffect, WaterEffectImpl };\n//# sourceMappingURL=Water.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}