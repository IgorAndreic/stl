{"ast":null,"code":"import { BufferAttribute, BufferGeometry, ClampToEdgeWrapping, Color, FileLoader, Float32BufferAttribute, Group, LinearFilter, LinearMipmapLinearFilter, Loader, Matrix4, Mesh, MeshPhongMaterial, MeshStandardMaterial, MirroredRepeatWrapping, NearestFilter, RepeatWrapping, TextureLoader, SRGBColorSpace } from 'three';\nimport * as fflate from '../libs/fflate.module.js';\nconst COLOR_SPACE_3MF = SRGBColorSpace;\n\n/**\n *\n * 3D Manufacturing Format (3MF) specification: https://3mf.io/specification/\n *\n * The following features from the core specification are supported:\n *\n * - 3D Models\n * - Object Resources (Meshes and Components)\n * - Material Resources (Base Materials)\n *\n * 3MF Materials and Properties Extension are only partially supported.\n *\n * - Texture 2D\n * - Texture 2D Groups\n * - Color Groups (Vertex Colors)\n * - Metallic Display Properties (PBR)\n */\n\nclass ThreeMFLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.availableExtensions = [];\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(data) {\n    const scope = this;\n    const textureLoader = new TextureLoader(this.manager);\n    function loadDocument(data) {\n      let zip = null;\n      let file = null;\n      let relsName;\n      let modelRelsName;\n      const modelPartNames = [];\n      const texturesPartNames = [];\n      let modelRels;\n      const modelParts = {};\n      const printTicketParts = {};\n      const texturesParts = {};\n      const textDecoder = new TextDecoder();\n      try {\n        zip = fflate.unzipSync(new Uint8Array(data));\n      } catch (e) {\n        if (e instanceof ReferenceError) {\n          console.error('THREE.3MFLoader: fflate missing and file is compressed.');\n          return null;\n        }\n      }\n      for (file in zip) {\n        if (file.match(/\\_rels\\/.rels$/)) {\n          relsName = file;\n        } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n          modelRelsName = file;\n        } else if (file.match(/^3D\\/.*\\.model$/)) {\n          modelPartNames.push(file);\n        } else if (file.match(/^3D\\/Textures?\\/.*/)) {\n          texturesPartNames.push(file);\n        }\n      }\n      if (relsName === undefined) throw new Error('THREE.ThreeMFLoader: Cannot find relationship file `rels` in 3MF archive.');\n\n      //\n\n      const relsView = zip[relsName];\n      const relsFileText = textDecoder.decode(relsView);\n      const rels = parseRelsXml(relsFileText);\n\n      //\n\n      if (modelRelsName) {\n        const relsView = zip[modelRelsName];\n        const relsFileText = textDecoder.decode(relsView);\n        modelRels = parseRelsXml(relsFileText);\n      }\n\n      //\n\n      for (let i = 0; i < modelPartNames.length; i++) {\n        const modelPart = modelPartNames[i];\n        const view = zip[modelPart];\n        const fileText = textDecoder.decode(view);\n        const xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n        if (xmlData.documentElement.nodeName.toLowerCase() !== 'model') {\n          console.error('THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart);\n        }\n        const modelNode = xmlData.querySelector('model');\n        const extensions = {};\n        for (let i = 0; i < modelNode.attributes.length; i++) {\n          const attr = modelNode.attributes[i];\n          if (attr.name.match(/^xmlns:(.+)$/)) {\n            extensions[attr.value] = RegExp.$1;\n          }\n        }\n        const modelData = parseModelNode(modelNode);\n        modelData['xml'] = modelNode;\n        if (0 < Object.keys(extensions).length) {\n          modelData['extensions'] = extensions;\n        }\n        modelParts[modelPart] = modelData;\n      }\n\n      //\n\n      for (let i = 0; i < texturesPartNames.length; i++) {\n        const texturesPartName = texturesPartNames[i];\n        texturesParts[texturesPartName] = zip[texturesPartName].buffer;\n      }\n      return {\n        rels: rels,\n        modelRels: modelRels,\n        model: modelParts,\n        printTicket: printTicketParts,\n        texture: texturesParts\n      };\n    }\n    function parseRelsXml(relsFileText) {\n      const relationships = [];\n      const relsXmlData = new DOMParser().parseFromString(relsFileText, 'application/xml');\n      const relsNodes = relsXmlData.querySelectorAll('Relationship');\n      for (let i = 0; i < relsNodes.length; i++) {\n        const relsNode = relsNodes[i];\n        const relationship = {\n          target: relsNode.getAttribute('Target'),\n          //required\n          id: relsNode.getAttribute('Id'),\n          //required\n          type: relsNode.getAttribute('Type') //required\n        };\n        relationships.push(relationship);\n      }\n      return relationships;\n    }\n    function parseMetadataNodes(metadataNodes) {\n      const metadataData = {};\n      for (let i = 0; i < metadataNodes.length; i++) {\n        const metadataNode = metadataNodes[i];\n        const name = metadataNode.getAttribute('name');\n        const validNames = ['Title', 'Designer', 'Description', 'Copyright', 'LicenseTerms', 'Rating', 'CreationDate', 'ModificationDate'];\n        if (0 <= validNames.indexOf(name)) {\n          metadataData[name] = metadataNode.textContent;\n        }\n      }\n      return metadataData;\n    }\n    function parseBasematerialsNode(basematerialsNode) {\n      const basematerialsData = {\n        id: basematerialsNode.getAttribute('id'),\n        // required\n        basematerials: []\n      };\n      const basematerialNodes = basematerialsNode.querySelectorAll('base');\n      for (let i = 0; i < basematerialNodes.length; i++) {\n        const basematerialNode = basematerialNodes[i];\n        const basematerialData = parseBasematerialNode(basematerialNode);\n        basematerialData.index = i; // the order and count of the material nodes form an implicit 0-based index\n        basematerialsData.basematerials.push(basematerialData);\n      }\n      return basematerialsData;\n    }\n    function parseTexture2DNode(texture2DNode) {\n      const texture2dData = {\n        id: texture2DNode.getAttribute('id'),\n        // required\n        path: texture2DNode.getAttribute('path'),\n        // required\n        contenttype: texture2DNode.getAttribute('contenttype'),\n        // required\n        tilestyleu: texture2DNode.getAttribute('tilestyleu'),\n        tilestylev: texture2DNode.getAttribute('tilestylev'),\n        filter: texture2DNode.getAttribute('filter')\n      };\n      return texture2dData;\n    }\n    function parseTextures2DGroupNode(texture2DGroupNode) {\n      const texture2DGroupData = {\n        id: texture2DGroupNode.getAttribute('id'),\n        // required\n        texid: texture2DGroupNode.getAttribute('texid'),\n        // required\n        displaypropertiesid: texture2DGroupNode.getAttribute('displaypropertiesid')\n      };\n      const tex2coordNodes = texture2DGroupNode.querySelectorAll('tex2coord');\n      const uvs = [];\n      for (let i = 0; i < tex2coordNodes.length; i++) {\n        const tex2coordNode = tex2coordNodes[i];\n        const u = tex2coordNode.getAttribute('u');\n        const v = tex2coordNode.getAttribute('v');\n        uvs.push(parseFloat(u), parseFloat(v));\n      }\n      texture2DGroupData['uvs'] = new Float32Array(uvs);\n      return texture2DGroupData;\n    }\n    function parseColorGroupNode(colorGroupNode) {\n      const colorGroupData = {\n        id: colorGroupNode.getAttribute('id'),\n        // required\n        displaypropertiesid: colorGroupNode.getAttribute('displaypropertiesid')\n      };\n      const colorNodes = colorGroupNode.querySelectorAll('color');\n      const colors = [];\n      const colorObject = new Color();\n      for (let i = 0; i < colorNodes.length; i++) {\n        const colorNode = colorNodes[i];\n        const color = colorNode.getAttribute('color');\n        colorObject.setStyle(color.substring(0, 7), COLOR_SPACE_3MF);\n        colors.push(colorObject.r, colorObject.g, colorObject.b);\n      }\n      colorGroupData['colors'] = new Float32Array(colors);\n      return colorGroupData;\n    }\n    function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n      const metallicDisplaypropertiesData = {\n        id: metallicDisplaypropetiesNode.getAttribute('id') // required\n      };\n      const metallicNodes = metallicDisplaypropetiesNode.querySelectorAll('pbmetallic');\n      const metallicData = [];\n      for (let i = 0; i < metallicNodes.length; i++) {\n        const metallicNode = metallicNodes[i];\n        metallicData.push({\n          name: metallicNode.getAttribute('name'),\n          // required\n          metallicness: parseFloat(metallicNode.getAttribute('metallicness')),\n          // required\n          roughness: parseFloat(metallicNode.getAttribute('roughness')) // required\n        });\n      }\n      metallicDisplaypropertiesData.data = metallicData;\n      return metallicDisplaypropertiesData;\n    }\n    function parseBasematerialNode(basematerialNode) {\n      const basematerialData = {};\n      basematerialData['name'] = basematerialNode.getAttribute('name'); // required\n      basematerialData['displaycolor'] = basematerialNode.getAttribute('displaycolor'); // required\n      basematerialData['displaypropertiesid'] = basematerialNode.getAttribute('displaypropertiesid');\n      return basematerialData;\n    }\n    function parseMeshNode(meshNode) {\n      const meshData = {};\n      const vertices = [];\n      const vertexNodes = meshNode.querySelectorAll('vertices vertex');\n      for (let i = 0; i < vertexNodes.length; i++) {\n        const vertexNode = vertexNodes[i];\n        const x = vertexNode.getAttribute('x');\n        const y = vertexNode.getAttribute('y');\n        const z = vertexNode.getAttribute('z');\n        vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\n      }\n      meshData['vertices'] = new Float32Array(vertices);\n      const triangleProperties = [];\n      const triangles = [];\n      const triangleNodes = meshNode.querySelectorAll('triangles triangle');\n      for (let i = 0; i < triangleNodes.length; i++) {\n        const triangleNode = triangleNodes[i];\n        const v1 = triangleNode.getAttribute('v1');\n        const v2 = triangleNode.getAttribute('v2');\n        const v3 = triangleNode.getAttribute('v3');\n        const p1 = triangleNode.getAttribute('p1');\n        const p2 = triangleNode.getAttribute('p2');\n        const p3 = triangleNode.getAttribute('p3');\n        const pid = triangleNode.getAttribute('pid');\n        const triangleProperty = {};\n        triangleProperty['v1'] = parseInt(v1, 10);\n        triangleProperty['v2'] = parseInt(v2, 10);\n        triangleProperty['v3'] = parseInt(v3, 10);\n        triangles.push(triangleProperty['v1'], triangleProperty['v2'], triangleProperty['v3']);\n\n        // optional\n\n        if (p1) {\n          triangleProperty['p1'] = parseInt(p1, 10);\n        }\n        if (p2) {\n          triangleProperty['p2'] = parseInt(p2, 10);\n        }\n        if (p3) {\n          triangleProperty['p3'] = parseInt(p3, 10);\n        }\n        if (pid) {\n          triangleProperty['pid'] = pid;\n        }\n        if (0 < Object.keys(triangleProperty).length) {\n          triangleProperties.push(triangleProperty);\n        }\n      }\n      meshData['triangleProperties'] = triangleProperties;\n      meshData['triangles'] = new Uint32Array(triangles);\n      return meshData;\n    }\n    function parseComponentsNode(componentsNode) {\n      const components = [];\n      const componentNodes = componentsNode.querySelectorAll('component');\n      for (let i = 0; i < componentNodes.length; i++) {\n        const componentNode = componentNodes[i];\n        const componentData = parseComponentNode(componentNode);\n        components.push(componentData);\n      }\n      return components;\n    }\n    function parseComponentNode(componentNode) {\n      const componentData = {};\n      componentData['objectId'] = componentNode.getAttribute('objectid'); // required\n\n      const transform = componentNode.getAttribute('transform');\n      if (transform) {\n        componentData['transform'] = parseTransform(transform);\n      }\n      return componentData;\n    }\n    function parseTransform(transform) {\n      const t = [];\n      transform.split(' ').forEach(function (s) {\n        t.push(parseFloat(s));\n      });\n      const matrix = new Matrix4();\n      matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0.0, 0.0, 0.0, 1.0);\n      return matrix;\n    }\n    function parseObjectNode(objectNode) {\n      const objectData = {\n        type: objectNode.getAttribute('type')\n      };\n      const id = objectNode.getAttribute('id');\n      if (id) {\n        objectData['id'] = id;\n      }\n      const pid = objectNode.getAttribute('pid');\n      if (pid) {\n        objectData['pid'] = pid;\n      }\n      const pindex = objectNode.getAttribute('pindex');\n      if (pindex) {\n        objectData['pindex'] = pindex;\n      }\n      const thumbnail = objectNode.getAttribute('thumbnail');\n      if (thumbnail) {\n        objectData['thumbnail'] = thumbnail;\n      }\n      const partnumber = objectNode.getAttribute('partnumber');\n      if (partnumber) {\n        objectData['partnumber'] = partnumber;\n      }\n      const name = objectNode.getAttribute('name');\n      if (name) {\n        objectData['name'] = name;\n      }\n      const meshNode = objectNode.querySelector('mesh');\n      if (meshNode) {\n        objectData['mesh'] = parseMeshNode(meshNode);\n      }\n      const componentsNode = objectNode.querySelector('components');\n      if (componentsNode) {\n        objectData['components'] = parseComponentsNode(componentsNode);\n      }\n      return objectData;\n    }\n    function parseResourcesNode(resourcesNode) {\n      const resourcesData = {};\n      resourcesData['basematerials'] = {};\n      const basematerialsNodes = resourcesNode.querySelectorAll('basematerials');\n      for (let i = 0; i < basematerialsNodes.length; i++) {\n        const basematerialsNode = basematerialsNodes[i];\n        const basematerialsData = parseBasematerialsNode(basematerialsNode);\n        resourcesData['basematerials'][basematerialsData['id']] = basematerialsData;\n      }\n\n      //\n\n      resourcesData['texture2d'] = {};\n      const textures2DNodes = resourcesNode.querySelectorAll('texture2d');\n      for (let i = 0; i < textures2DNodes.length; i++) {\n        const textures2DNode = textures2DNodes[i];\n        const texture2DData = parseTexture2DNode(textures2DNode);\n        resourcesData['texture2d'][texture2DData['id']] = texture2DData;\n      }\n\n      //\n\n      resourcesData['colorgroup'] = {};\n      const colorGroupNodes = resourcesNode.querySelectorAll('colorgroup');\n      for (let i = 0; i < colorGroupNodes.length; i++) {\n        const colorGroupNode = colorGroupNodes[i];\n        const colorGroupData = parseColorGroupNode(colorGroupNode);\n        resourcesData['colorgroup'][colorGroupData['id']] = colorGroupData;\n      }\n\n      //\n\n      resourcesData['pbmetallicdisplayproperties'] = {};\n      const pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll('pbmetallicdisplayproperties');\n      for (let i = 0; i < pbmetallicdisplaypropertiesNodes.length; i++) {\n        const pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[i];\n        const pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\n        resourcesData['pbmetallicdisplayproperties'][pbmetallicdisplaypropertiesData['id']] = pbmetallicdisplaypropertiesData;\n      }\n\n      //\n\n      resourcesData['texture2dgroup'] = {};\n      const textures2DGroupNodes = resourcesNode.querySelectorAll('texture2dgroup');\n      for (let i = 0; i < textures2DGroupNodes.length; i++) {\n        const textures2DGroupNode = textures2DGroupNodes[i];\n        const textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\n        resourcesData['texture2dgroup'][textures2DGroupData['id']] = textures2DGroupData;\n      }\n\n      //\n\n      resourcesData['object'] = {};\n      const objectNodes = resourcesNode.querySelectorAll('object');\n      for (let i = 0; i < objectNodes.length; i++) {\n        const objectNode = objectNodes[i];\n        const objectData = parseObjectNode(objectNode);\n        resourcesData['object'][objectData['id']] = objectData;\n      }\n      return resourcesData;\n    }\n    function parseBuildNode(buildNode) {\n      const buildData = [];\n      const itemNodes = buildNode.querySelectorAll('item');\n      for (let i = 0; i < itemNodes.length; i++) {\n        const itemNode = itemNodes[i];\n        const buildItem = {\n          objectId: itemNode.getAttribute('objectid')\n        };\n        const transform = itemNode.getAttribute('transform');\n        if (transform) {\n          buildItem['transform'] = parseTransform(transform);\n        }\n        buildData.push(buildItem);\n      }\n      return buildData;\n    }\n    function parseModelNode(modelNode) {\n      const modelData = {\n        unit: modelNode.getAttribute('unit') || 'millimeter'\n      };\n      const metadataNodes = modelNode.querySelectorAll('metadata');\n      if (metadataNodes) {\n        modelData['metadata'] = parseMetadataNodes(metadataNodes);\n      }\n      const resourcesNode = modelNode.querySelector('resources');\n      if (resourcesNode) {\n        modelData['resources'] = parseResourcesNode(resourcesNode);\n      }\n      const buildNode = modelNode.querySelector('build');\n      if (buildNode) {\n        modelData['build'] = parseBuildNode(buildNode);\n      }\n      return modelData;\n    }\n    function buildTexture(texture2dgroup, objects, modelData, textureData) {\n      const texid = texture2dgroup.texid;\n      const texture2ds = modelData.resources.texture2d;\n      const texture2d = texture2ds[texid];\n      if (texture2d) {\n        const data = textureData[texture2d.path];\n        const type = texture2d.contenttype;\n        const blob = new Blob([data], {\n          type: type\n        });\n        const sourceURI = URL.createObjectURL(blob);\n        const texture = textureLoader.load(sourceURI, function () {\n          URL.revokeObjectURL(sourceURI);\n        });\n        texture.colorSpace = COLOR_SPACE_3MF;\n\n        // texture parameters\n\n        switch (texture2d.tilestyleu) {\n          case 'wrap':\n            texture.wrapS = RepeatWrapping;\n            break;\n          case 'mirror':\n            texture.wrapS = MirroredRepeatWrapping;\n            break;\n          case 'none':\n          case 'clamp':\n            texture.wrapS = ClampToEdgeWrapping;\n            break;\n          default:\n            texture.wrapS = RepeatWrapping;\n        }\n        switch (texture2d.tilestylev) {\n          case 'wrap':\n            texture.wrapT = RepeatWrapping;\n            break;\n          case 'mirror':\n            texture.wrapT = MirroredRepeatWrapping;\n            break;\n          case 'none':\n          case 'clamp':\n            texture.wrapT = ClampToEdgeWrapping;\n            break;\n          default:\n            texture.wrapT = RepeatWrapping;\n        }\n        switch (texture2d.filter) {\n          case 'auto':\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n            break;\n          case 'linear':\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearFilter;\n            break;\n          case 'nearest':\n            texture.magFilter = NearestFilter;\n            texture.minFilter = NearestFilter;\n            break;\n          default:\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n        }\n        return texture;\n      } else {\n        return null;\n      }\n    }\n    function buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData) {\n      const objectPindex = objectData.pindex;\n      const materialMap = {};\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        const pindex = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectPindex;\n        if (materialMap[pindex] === undefined) materialMap[pindex] = [];\n        materialMap[pindex].push(triangleProperty);\n      }\n\n      //\n\n      const keys = Object.keys(materialMap);\n      const meshes = [];\n      for (let i = 0, l = keys.length; i < l; i++) {\n        const materialIndex = keys[i];\n        const trianglePropertiesProps = materialMap[materialIndex];\n        const basematerialData = basematerials.basematerials[materialIndex];\n        const material = getBuild(basematerialData, objects, modelData, textureData, objectData, buildBasematerial);\n\n        //\n\n        const geometry = new BufferGeometry();\n        const positionData = [];\n        const vertices = meshData.vertices;\n        for (let j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n          const triangleProperty = trianglePropertiesProps[j];\n          positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n        }\n        geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n\n        //\n\n        const mesh = new Mesh(geometry, material);\n        meshes.push(mesh);\n      }\n      return meshes;\n    }\n    function buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData) {\n      // geometry\n\n      const geometry = new BufferGeometry();\n      const positionData = [];\n      const uvData = [];\n      const vertices = meshData.vertices;\n      const uvs = texture2dgroup.uvs;\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n\n        //\n\n        uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\n      }\n      geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute('uv', new Float32BufferAttribute(uvData, 2));\n\n      // material\n\n      const texture = getBuild(texture2dgroup, objects, modelData, textureData, objectData, buildTexture);\n      const material = new MeshPhongMaterial({\n        map: texture,\n        flatShading: true\n      });\n\n      // mesh\n\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n    function buildVertexColorMesh(colorgroup, triangleProperties, meshData, objectData) {\n      // geometry\n\n      const geometry = new BufferGeometry();\n      const positionData = [];\n      const colorData = [];\n      const vertices = meshData.vertices;\n      const colors = colorgroup.colors;\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        const v1 = triangleProperty.v1;\n        const v2 = triangleProperty.v2;\n        const v3 = triangleProperty.v3;\n        positionData.push(vertices[v1 * 3 + 0]);\n        positionData.push(vertices[v1 * 3 + 1]);\n        positionData.push(vertices[v1 * 3 + 2]);\n        positionData.push(vertices[v2 * 3 + 0]);\n        positionData.push(vertices[v2 * 3 + 1]);\n        positionData.push(vertices[v2 * 3 + 2]);\n        positionData.push(vertices[v3 * 3 + 0]);\n        positionData.push(vertices[v3 * 3 + 1]);\n        positionData.push(vertices[v3 * 3 + 2]);\n\n        //\n\n        const p1 = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectData.pindex;\n        const p2 = triangleProperty.p2 !== undefined ? triangleProperty.p2 : p1;\n        const p3 = triangleProperty.p3 !== undefined ? triangleProperty.p3 : p1;\n        colorData.push(colors[p1 * 3 + 0]);\n        colorData.push(colors[p1 * 3 + 1]);\n        colorData.push(colors[p1 * 3 + 2]);\n        colorData.push(colors[p2 * 3 + 0]);\n        colorData.push(colors[p2 * 3 + 1]);\n        colorData.push(colors[p2 * 3 + 2]);\n        colorData.push(colors[p3 * 3 + 0]);\n        colorData.push(colors[p3 * 3 + 1]);\n        colorData.push(colors[p3 * 3 + 2]);\n      }\n      geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute('color', new Float32BufferAttribute(colorData, 3));\n\n      // material\n\n      const material = new MeshPhongMaterial({\n        vertexColors: true,\n        flatShading: true\n      });\n\n      // mesh\n\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n    function buildDefaultMesh(meshData) {\n      const geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(meshData['triangles'], 1));\n      geometry.setAttribute('position', new BufferAttribute(meshData['vertices'], 3));\n      const material = new MeshPhongMaterial({\n        name: Loader.DEFAULT_MATERIAL_NAME,\n        color: 0xffffff,\n        flatShading: true\n      });\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n    function buildMeshes(resourceMap, meshData, objects, modelData, textureData, objectData) {\n      const keys = Object.keys(resourceMap);\n      const meshes = [];\n      for (let i = 0, il = keys.length; i < il; i++) {\n        const resourceId = keys[i];\n        const triangleProperties = resourceMap[resourceId];\n        const resourceType = getResourceType(resourceId, modelData);\n        switch (resourceType) {\n          case 'material':\n            const basematerials = modelData.resources.basematerials[resourceId];\n            const newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData);\n            for (let j = 0, jl = newMeshes.length; j < jl; j++) {\n              meshes.push(newMeshes[j]);\n            }\n            break;\n          case 'texture':\n            const texture2dgroup = modelData.resources.texture2dgroup[resourceId];\n            meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData));\n            break;\n          case 'vertexColors':\n            const colorgroup = modelData.resources.colorgroup[resourceId];\n            meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, meshData, objectData));\n            break;\n          case 'default':\n            meshes.push(buildDefaultMesh(meshData));\n            break;\n          default:\n            console.error('THREE.3MFLoader: Unsupported resource type.');\n        }\n      }\n      if (objectData.name) {\n        for (let i = 0; i < meshes.length; i++) {\n          meshes[i].name = objectData.name;\n        }\n      }\n      return meshes;\n    }\n    function getResourceType(pid, modelData) {\n      if (modelData.resources.texture2dgroup[pid] !== undefined) {\n        return 'texture';\n      } else if (modelData.resources.basematerials[pid] !== undefined) {\n        return 'material';\n      } else if (modelData.resources.colorgroup[pid] !== undefined) {\n        return 'vertexColors';\n      } else if (pid === 'default') {\n        return 'default';\n      } else {\n        return undefined;\n      }\n    }\n    function analyzeObject(meshData, objectData) {\n      const resourceMap = {};\n      const triangleProperties = meshData['triangleProperties'];\n      const objectPid = objectData.pid;\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        let pid = triangleProperty.pid !== undefined ? triangleProperty.pid : objectPid;\n        if (pid === undefined) pid = 'default';\n        if (resourceMap[pid] === undefined) resourceMap[pid] = [];\n        resourceMap[pid].push(triangleProperty);\n      }\n      return resourceMap;\n    }\n    function buildGroup(meshData, objects, modelData, textureData, objectData) {\n      const group = new Group();\n      const resourceMap = analyzeObject(meshData, objectData);\n      const meshes = buildMeshes(resourceMap, meshData, objects, modelData, textureData, objectData);\n      for (let i = 0, l = meshes.length; i < l; i++) {\n        group.add(meshes[i]);\n      }\n      return group;\n    }\n    function applyExtensions(extensions, meshData, modelXml) {\n      if (!extensions) {\n        return;\n      }\n      const availableExtensions = [];\n      const keys = Object.keys(extensions);\n      for (let i = 0; i < keys.length; i++) {\n        const ns = keys[i];\n        for (let j = 0; j < scope.availableExtensions.length; j++) {\n          const extension = scope.availableExtensions[j];\n          if (extension.ns === ns) {\n            availableExtensions.push(extension);\n          }\n        }\n      }\n      for (let i = 0; i < availableExtensions.length; i++) {\n        const extension = availableExtensions[i];\n        extension.apply(modelXml, extensions[extension['ns']], meshData);\n      }\n    }\n    function getBuild(data, objects, modelData, textureData, objectData, builder) {\n      if (data.build !== undefined) return data.build;\n      data.build = builder(data, objects, modelData, textureData, objectData);\n      return data.build;\n    }\n    function buildBasematerial(materialData, objects, modelData) {\n      let material;\n      const displaypropertiesid = materialData.displaypropertiesid;\n      const pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n      if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== undefined) {\n        // metallic display property, use StandardMaterial\n\n        const pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\n        const metallicData = pbmetallicdisplayproperty.data[materialData.index];\n        material = new MeshStandardMaterial({\n          flatShading: true,\n          roughness: metallicData.roughness,\n          metalness: metallicData.metallicness\n        });\n      } else {\n        // otherwise use PhongMaterial\n\n        material = new MeshPhongMaterial({\n          flatShading: true\n        });\n      }\n      material.name = materialData.name;\n\n      // displaycolor MUST be specified with a value of a 6 or 8 digit hexadecimal number, e.g. \"#RRGGBB\" or \"#RRGGBBAA\"\n\n      const displaycolor = materialData.displaycolor;\n      const color = displaycolor.substring(0, 7);\n      material.color.setStyle(color, COLOR_SPACE_3MF);\n\n      // process alpha if set\n\n      if (displaycolor.length === 9) {\n        material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\n      }\n      return material;\n    }\n    function buildComposite(compositeData, objects, modelData, textureData) {\n      const composite = new Group();\n      for (let j = 0; j < compositeData.length; j++) {\n        const component = compositeData[j];\n        let build = objects[component.objectId];\n        if (build === undefined) {\n          buildObject(component.objectId, objects, modelData, textureData);\n          build = objects[component.objectId];\n        }\n        const object3D = build.clone();\n\n        // apply component transform\n\n        const transform = component.transform;\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n        composite.add(object3D);\n      }\n      return composite;\n    }\n    function buildObject(objectId, objects, modelData, textureData) {\n      const objectData = modelData['resources']['object'][objectId];\n      if (objectData['mesh']) {\n        const meshData = objectData['mesh'];\n        const extensions = modelData['extensions'];\n        const modelXml = modelData['xml'];\n        applyExtensions(extensions, meshData, modelXml);\n        objects[objectData.id] = getBuild(meshData, objects, modelData, textureData, objectData, buildGroup);\n      } else {\n        const compositeData = objectData['components'];\n        objects[objectData.id] = getBuild(compositeData, objects, modelData, textureData, objectData, buildComposite);\n      }\n      if (objectData.name) {\n        objects[objectData.id].name = objectData.name;\n      }\n    }\n    function buildObjects(data3mf) {\n      const modelsData = data3mf.model;\n      const modelRels = data3mf.modelRels;\n      const objects = {};\n      const modelsKeys = Object.keys(modelsData);\n      const textureData = {};\n\n      // evaluate model relationships to textures\n\n      if (modelRels) {\n        for (let i = 0, l = modelRels.length; i < l; i++) {\n          const modelRel = modelRels[i];\n          const textureKey = modelRel.target.substring(1);\n          if (data3mf.texture[textureKey]) {\n            textureData[modelRel.target] = data3mf.texture[textureKey];\n          }\n        }\n      }\n\n      // start build\n\n      for (let i = 0; i < modelsKeys.length; i++) {\n        const modelsKey = modelsKeys[i];\n        const modelData = modelsData[modelsKey];\n        const objectIds = Object.keys(modelData['resources']['object']);\n        for (let j = 0; j < objectIds.length; j++) {\n          const objectId = objectIds[j];\n          buildObject(objectId, objects, modelData, textureData);\n        }\n      }\n      return objects;\n    }\n    function fetch3DModelPart(rels) {\n      for (let i = 0; i < rels.length; i++) {\n        const rel = rels[i];\n        const extension = rel.target.split('.').pop();\n        if (extension.toLowerCase() === 'model') return rel;\n      }\n    }\n    function build(objects, data3mf) {\n      const group = new Group();\n      const relationship = fetch3DModelPart(data3mf['rels']);\n      const buildData = data3mf.model[relationship['target'].substring(1)]['build'];\n      for (let i = 0; i < buildData.length; i++) {\n        const buildItem = buildData[i];\n        const object3D = objects[buildItem['objectId']].clone();\n\n        // apply transform\n\n        const transform = buildItem['transform'];\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n        group.add(object3D);\n      }\n      return group;\n    }\n    const data3mf = loadDocument(data);\n    const objects = buildObjects(data3mf);\n    return build(objects, data3mf);\n  }\n  addExtension(extension) {\n    this.availableExtensions.push(extension);\n  }\n}\nexport { ThreeMFLoader };","map":{"version":3,"names":["BufferAttribute","BufferGeometry","ClampToEdgeWrapping","Color","FileLoader","Float32BufferAttribute","Group","LinearFilter","LinearMipmapLinearFilter","Loader","Matrix4","Mesh","MeshPhongMaterial","MeshStandardMaterial","MirroredRepeatWrapping","NearestFilter","RepeatWrapping","TextureLoader","SRGBColorSpace","fflate","COLOR_SPACE_3MF","ThreeMFLoader","constructor","manager","availableExtensions","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","data","textureLoader","loadDocument","zip","file","relsName","modelRelsName","modelPartNames","texturesPartNames","modelRels","modelParts","printTicketParts","texturesParts","textDecoder","TextDecoder","unzipSync","Uint8Array","ReferenceError","match","push","undefined","Error","relsView","relsFileText","decode","rels","parseRelsXml","i","length","modelPart","view","fileText","xmlData","DOMParser","parseFromString","documentElement","nodeName","toLowerCase","modelNode","querySelector","extensions","attributes","attr","name","value","RegExp","$1","modelData","parseModelNode","Object","keys","texturesPartName","model","printTicket","texture","relationships","relsXmlData","relsNodes","querySelectorAll","relsNode","relationship","target","getAttribute","id","type","parseMetadataNodes","metadataNodes","metadataData","metadataNode","validNames","indexOf","textContent","parseBasematerialsNode","basematerialsNode","basematerialsData","basematerials","basematerialNodes","basematerialNode","basematerialData","parseBasematerialNode","index","parseTexture2DNode","texture2DNode","texture2dData","contenttype","tilestyleu","tilestylev","filter","parseTextures2DGroupNode","texture2DGroupNode","texture2DGroupData","texid","displaypropertiesid","tex2coordNodes","uvs","tex2coordNode","u","v","parseFloat","Float32Array","parseColorGroupNode","colorGroupNode","colorGroupData","colorNodes","colors","colorObject","colorNode","color","setStyle","substring","r","g","b","parseMetallicDisplaypropertiesNode","metallicDisplaypropetiesNode","metallicDisplaypropertiesData","metallicNodes","metallicData","metallicNode","metallicness","roughness","parseMeshNode","meshNode","meshData","vertices","vertexNodes","vertexNode","x","y","z","triangleProperties","triangles","triangleNodes","triangleNode","v1","v2","v3","p1","p2","p3","pid","triangleProperty","parseInt","Uint32Array","parseComponentsNode","componentsNode","components","componentNodes","componentNode","componentData","parseComponentNode","transform","parseTransform","t","split","forEach","s","matrix","set","parseObjectNode","objectNode","objectData","pindex","thumbnail","partnumber","parseResourcesNode","resourcesNode","resourcesData","basematerialsNodes","textures2DNodes","textures2DNode","texture2DData","colorGroupNodes","pbmetallicdisplaypropertiesNodes","pbmetallicdisplaypropertiesNode","pbmetallicdisplaypropertiesData","textures2DGroupNodes","textures2DGroupNode","textures2DGroupData","objectNodes","parseBuildNode","buildNode","buildData","itemNodes","itemNode","buildItem","objectId","unit","buildTexture","texture2dgroup","objects","textureData","texture2ds","resources","texture2d","blob","Blob","sourceURI","URL","createObjectURL","revokeObjectURL","colorSpace","wrapS","wrapT","magFilter","minFilter","buildBasematerialsMeshes","objectPindex","materialMap","l","meshes","materialIndex","trianglePropertiesProps","material","getBuild","buildBasematerial","geometry","positionData","j","jl","setAttribute","mesh","buildTexturedMesh","uvData","map","flatShading","buildVertexColorMesh","colorgroup","colorData","vertexColors","buildDefaultMesh","setIndex","DEFAULT_MATERIAL_NAME","buildMeshes","resourceMap","il","resourceId","resourceType","getResourceType","newMeshes","analyzeObject","objectPid","buildGroup","group","add","applyExtensions","modelXml","ns","extension","apply","builder","build","materialData","pbmetallicdisplayproperties","pbmetallicdisplayproperty","metalness","displaycolor","opacity","charAt","buildComposite","compositeData","composite","component","buildObject","object3D","clone","applyMatrix4","buildObjects","data3mf","modelsData","modelsKeys","modelRel","textureKey","modelsKey","objectIds","fetch3DModelPart","rel","pop","addExtension"],"sources":["D:/project/client/node_modules/three/examples/jsm/loaders/3MFLoader.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tClampToEdgeWrapping,\n\tColor,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tGroup,\n\tLinearFilter,\n\tLinearMipmapLinearFilter,\n\tLoader,\n\tMatrix4,\n\tMesh,\n\tMeshPhongMaterial,\n\tMeshStandardMaterial,\n\tMirroredRepeatWrapping,\n\tNearestFilter,\n\tRepeatWrapping,\n\tTextureLoader,\n\tSRGBColorSpace\n} from 'three';\nimport * as fflate from '../libs/fflate.module.js';\n\nconst COLOR_SPACE_3MF = SRGBColorSpace;\n\n/**\n *\n * 3D Manufacturing Format (3MF) specification: https://3mf.io/specification/\n *\n * The following features from the core specification are supported:\n *\n * - 3D Models\n * - Object Resources (Meshes and Components)\n * - Material Resources (Base Materials)\n *\n * 3MF Materials and Properties Extension are only partially supported.\n *\n * - Texture 2D\n * - Texture 2D Groups\n * - Color Groups (Vertex Colors)\n * - Metallic Display Properties (PBR)\n */\n\nclass ThreeMFLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.availableExtensions = [];\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( buffer ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( data ) {\n\n\t\tconst scope = this;\n\t\tconst textureLoader = new TextureLoader( this.manager );\n\n\t\tfunction loadDocument( data ) {\n\n\t\t\tlet zip = null;\n\t\t\tlet file = null;\n\n\t\t\tlet relsName;\n\t\t\tlet modelRelsName;\n\t\t\tconst modelPartNames = [];\n\t\t\tconst texturesPartNames = [];\n\n\t\t\tlet modelRels;\n\t\t\tconst modelParts = {};\n\t\t\tconst printTicketParts = {};\n\t\t\tconst texturesParts = {};\n\n\t\t\tconst textDecoder = new TextDecoder();\n\n\t\t\ttry {\n\n\t\t\t\tzip = fflate.unzipSync( new Uint8Array( data ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( e instanceof ReferenceError ) {\n\n\t\t\t\t\tconsole.error( 'THREE.3MFLoader: fflate missing and file is compressed.' );\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( file in zip ) {\n\n\t\t\t\tif ( file.match( /\\_rels\\/.rels$/ ) ) {\n\n\t\t\t\t\trelsName = file;\n\n\t\t\t\t} else if ( file.match( /3D\\/_rels\\/.*\\.model\\.rels$/ ) ) {\n\n\t\t\t\t\tmodelRelsName = file;\n\n\t\t\t\t} else if ( file.match( /^3D\\/.*\\.model$/ ) ) {\n\n\t\t\t\t\tmodelPartNames.push( file );\n\n\t\t\t\t} else if ( file.match( /^3D\\/Textures?\\/.*/ ) ) {\n\n\t\t\t\t\ttexturesPartNames.push( file );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( relsName === undefined ) throw new Error( 'THREE.ThreeMFLoader: Cannot find relationship file `rels` in 3MF archive.' );\n\n\t\t\t//\n\n\t\t\tconst relsView = zip[ relsName ];\n\t\t\tconst relsFileText = textDecoder.decode( relsView );\n\t\t\tconst rels = parseRelsXml( relsFileText );\n\n\t\t\t//\n\n\t\t\tif ( modelRelsName ) {\n\n\t\t\t\tconst relsView = zip[ modelRelsName ];\n\t\t\t\tconst relsFileText = textDecoder.decode( relsView );\n\t\t\t\tmodelRels = parseRelsXml( relsFileText );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfor ( let i = 0; i < modelPartNames.length; i ++ ) {\n\n\t\t\t\tconst modelPart = modelPartNames[ i ];\n\t\t\t\tconst view = zip[ modelPart ];\n\n\t\t\t\tconst fileText = textDecoder.decode( view );\n\t\t\t\tconst xmlData = new DOMParser().parseFromString( fileText, 'application/xml' );\n\n\t\t\t\tif ( xmlData.documentElement.nodeName.toLowerCase() !== 'model' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart );\n\n\t\t\t\t}\n\n\t\t\t\tconst modelNode = xmlData.querySelector( 'model' );\n\t\t\t\tconst extensions = {};\n\n\t\t\t\tfor ( let i = 0; i < modelNode.attributes.length; i ++ ) {\n\n\t\t\t\t\tconst attr = modelNode.attributes[ i ];\n\t\t\t\t\tif ( attr.name.match( /^xmlns:(.+)$/ ) ) {\n\n\t\t\t\t\t\textensions[ attr.value ] = RegExp.$1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst modelData = parseModelNode( modelNode );\n\t\t\t\tmodelData[ 'xml' ] = modelNode;\n\n\t\t\t\tif ( 0 < Object.keys( extensions ).length ) {\n\n\t\t\t\t\tmodelData[ 'extensions' ] = extensions;\n\n\t\t\t\t}\n\n\t\t\t\tmodelParts[ modelPart ] = modelData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfor ( let i = 0; i < texturesPartNames.length; i ++ ) {\n\n\t\t\t\tconst texturesPartName = texturesPartNames[ i ];\n\t\t\t\ttexturesParts[ texturesPartName ] = zip[ texturesPartName ].buffer;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\trels: rels,\n\t\t\t\tmodelRels: modelRels,\n\t\t\t\tmodel: modelParts,\n\t\t\t\tprintTicket: printTicketParts,\n\t\t\t\ttexture: texturesParts\n\t\t\t};\n\n\t\t}\n\n\t\tfunction parseRelsXml( relsFileText ) {\n\n\t\t\tconst relationships = [];\n\n\t\t\tconst relsXmlData = new DOMParser().parseFromString( relsFileText, 'application/xml' );\n\n\t\t\tconst relsNodes = relsXmlData.querySelectorAll( 'Relationship' );\n\n\t\t\tfor ( let i = 0; i < relsNodes.length; i ++ ) {\n\n\t\t\t\tconst relsNode = relsNodes[ i ];\n\n\t\t\t\tconst relationship = {\n\t\t\t\t\ttarget: relsNode.getAttribute( 'Target' ), //required\n\t\t\t\t\tid: relsNode.getAttribute( 'Id' ), //required\n\t\t\t\t\ttype: relsNode.getAttribute( 'Type' ) //required\n\t\t\t\t};\n\n\t\t\t\trelationships.push( relationship );\n\n\t\t\t}\n\n\t\t\treturn relationships;\n\n\t\t}\n\n\t\tfunction parseMetadataNodes( metadataNodes ) {\n\n\t\t\tconst metadataData = {};\n\n\t\t\tfor ( let i = 0; i < metadataNodes.length; i ++ ) {\n\n\t\t\t\tconst metadataNode = metadataNodes[ i ];\n\t\t\t\tconst name = metadataNode.getAttribute( 'name' );\n\t\t\t\tconst validNames = [\n\t\t\t\t\t'Title',\n\t\t\t\t\t'Designer',\n\t\t\t\t\t'Description',\n\t\t\t\t\t'Copyright',\n\t\t\t\t\t'LicenseTerms',\n\t\t\t\t\t'Rating',\n\t\t\t\t\t'CreationDate',\n\t\t\t\t\t'ModificationDate'\n\t\t\t\t];\n\n\t\t\t\tif ( 0 <= validNames.indexOf( name ) ) {\n\n\t\t\t\t\tmetadataData[ name ] = metadataNode.textContent;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn metadataData;\n\n\t\t}\n\n\t\tfunction parseBasematerialsNode( basematerialsNode ) {\n\n\t\t\tconst basematerialsData = {\n\t\t\t\tid: basematerialsNode.getAttribute( 'id' ), // required\n\t\t\t\tbasematerials: []\n\t\t\t};\n\n\t\t\tconst basematerialNodes = basematerialsNode.querySelectorAll( 'base' );\n\n\t\t\tfor ( let i = 0; i < basematerialNodes.length; i ++ ) {\n\n\t\t\t\tconst basematerialNode = basematerialNodes[ i ];\n\t\t\t\tconst basematerialData = parseBasematerialNode( basematerialNode );\n\t\t\t\tbasematerialData.index = i; // the order and count of the material nodes form an implicit 0-based index\n\t\t\t\tbasematerialsData.basematerials.push( basematerialData );\n\n\t\t\t}\n\n\t\t\treturn basematerialsData;\n\n\t\t}\n\n\t\tfunction parseTexture2DNode( texture2DNode ) {\n\n\t\t\tconst texture2dData = {\n\t\t\t\tid: texture2DNode.getAttribute( 'id' ), // required\n\t\t\t\tpath: texture2DNode.getAttribute( 'path' ), // required\n\t\t\t\tcontenttype: texture2DNode.getAttribute( 'contenttype' ), // required\n\t\t\t\ttilestyleu: texture2DNode.getAttribute( 'tilestyleu' ),\n\t\t\t\ttilestylev: texture2DNode.getAttribute( 'tilestylev' ),\n\t\t\t\tfilter: texture2DNode.getAttribute( 'filter' ),\n\t\t\t};\n\n\t\t\treturn texture2dData;\n\n\t\t}\n\n\t\tfunction parseTextures2DGroupNode( texture2DGroupNode ) {\n\n\t\t\tconst texture2DGroupData = {\n\t\t\t\tid: texture2DGroupNode.getAttribute( 'id' ), // required\n\t\t\t\ttexid: texture2DGroupNode.getAttribute( 'texid' ), // required\n\t\t\t\tdisplaypropertiesid: texture2DGroupNode.getAttribute( 'displaypropertiesid' )\n\t\t\t};\n\n\t\t\tconst tex2coordNodes = texture2DGroupNode.querySelectorAll( 'tex2coord' );\n\n\t\t\tconst uvs = [];\n\n\t\t\tfor ( let i = 0; i < tex2coordNodes.length; i ++ ) {\n\n\t\t\t\tconst tex2coordNode = tex2coordNodes[ i ];\n\t\t\t\tconst u = tex2coordNode.getAttribute( 'u' );\n\t\t\t\tconst v = tex2coordNode.getAttribute( 'v' );\n\n\t\t\t\tuvs.push( parseFloat( u ), parseFloat( v ) );\n\n\t\t\t}\n\n\t\t\ttexture2DGroupData[ 'uvs' ] = new Float32Array( uvs );\n\n\t\t\treturn texture2DGroupData;\n\n\t\t}\n\n\t\tfunction parseColorGroupNode( colorGroupNode ) {\n\n\t\t\tconst colorGroupData = {\n\t\t\t\tid: colorGroupNode.getAttribute( 'id' ), // required\n\t\t\t\tdisplaypropertiesid: colorGroupNode.getAttribute( 'displaypropertiesid' )\n\t\t\t};\n\n\t\t\tconst colorNodes = colorGroupNode.querySelectorAll( 'color' );\n\n\t\t\tconst colors = [];\n\t\t\tconst colorObject = new Color();\n\n\t\t\tfor ( let i = 0; i < colorNodes.length; i ++ ) {\n\n\t\t\t\tconst colorNode = colorNodes[ i ];\n\t\t\t\tconst color = colorNode.getAttribute( 'color' );\n\n\t\t\t\tcolorObject.setStyle( color.substring( 0, 7 ), COLOR_SPACE_3MF );\n\n\t\t\t\tcolors.push( colorObject.r, colorObject.g, colorObject.b );\n\n\t\t\t}\n\n\t\t\tcolorGroupData[ 'colors' ] = new Float32Array( colors );\n\n\t\t\treturn colorGroupData;\n\n\t\t}\n\n\t\tfunction parseMetallicDisplaypropertiesNode( metallicDisplaypropetiesNode ) {\n\n\t\t\tconst metallicDisplaypropertiesData = {\n\t\t\t\tid: metallicDisplaypropetiesNode.getAttribute( 'id' ) // required\n\t\t\t};\n\n\t\t\tconst metallicNodes = metallicDisplaypropetiesNode.querySelectorAll( 'pbmetallic' );\n\n\t\t\tconst metallicData = [];\n\n\t\t\tfor ( let i = 0; i < metallicNodes.length; i ++ ) {\n\n\t\t\t\tconst metallicNode = metallicNodes[ i ];\n\n\t\t\t\tmetallicData.push( {\n\t\t\t\t\tname: metallicNode.getAttribute( 'name' ), // required\n\t\t\t\t\tmetallicness: parseFloat( metallicNode.getAttribute( 'metallicness' ) ), // required\n\t\t\t\t\troughness: parseFloat( metallicNode.getAttribute( 'roughness' ) ) // required\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tmetallicDisplaypropertiesData.data = metallicData;\n\n\t\t\treturn metallicDisplaypropertiesData;\n\n\t\t}\n\n\t\tfunction parseBasematerialNode( basematerialNode ) {\n\n\t\t\tconst basematerialData = {};\n\n\t\t\tbasematerialData[ 'name' ] = basematerialNode.getAttribute( 'name' ); // required\n\t\t\tbasematerialData[ 'displaycolor' ] = basematerialNode.getAttribute( 'displaycolor' ); // required\n\t\t\tbasematerialData[ 'displaypropertiesid' ] = basematerialNode.getAttribute( 'displaypropertiesid' );\n\n\t\t\treturn basematerialData;\n\n\t\t}\n\n\t\tfunction parseMeshNode( meshNode ) {\n\n\t\t\tconst meshData = {};\n\n\t\t\tconst vertices = [];\n\t\t\tconst vertexNodes = meshNode.querySelectorAll( 'vertices vertex' );\n\n\t\t\tfor ( let i = 0; i < vertexNodes.length; i ++ ) {\n\n\t\t\t\tconst vertexNode = vertexNodes[ i ];\n\t\t\t\tconst x = vertexNode.getAttribute( 'x' );\n\t\t\t\tconst y = vertexNode.getAttribute( 'y' );\n\t\t\t\tconst z = vertexNode.getAttribute( 'z' );\n\n\t\t\t\tvertices.push( parseFloat( x ), parseFloat( y ), parseFloat( z ) );\n\n\t\t\t}\n\n\t\t\tmeshData[ 'vertices' ] = new Float32Array( vertices );\n\n\t\t\tconst triangleProperties = [];\n\t\t\tconst triangles = [];\n\t\t\tconst triangleNodes = meshNode.querySelectorAll( 'triangles triangle' );\n\n\t\t\tfor ( let i = 0; i < triangleNodes.length; i ++ ) {\n\n\t\t\t\tconst triangleNode = triangleNodes[ i ];\n\t\t\t\tconst v1 = triangleNode.getAttribute( 'v1' );\n\t\t\t\tconst v2 = triangleNode.getAttribute( 'v2' );\n\t\t\t\tconst v3 = triangleNode.getAttribute( 'v3' );\n\t\t\t\tconst p1 = triangleNode.getAttribute( 'p1' );\n\t\t\t\tconst p2 = triangleNode.getAttribute( 'p2' );\n\t\t\t\tconst p3 = triangleNode.getAttribute( 'p3' );\n\t\t\t\tconst pid = triangleNode.getAttribute( 'pid' );\n\n\t\t\t\tconst triangleProperty = {};\n\n\t\t\t\ttriangleProperty[ 'v1' ] = parseInt( v1, 10 );\n\t\t\t\ttriangleProperty[ 'v2' ] = parseInt( v2, 10 );\n\t\t\t\ttriangleProperty[ 'v3' ] = parseInt( v3, 10 );\n\n\t\t\t\ttriangles.push( triangleProperty[ 'v1' ], triangleProperty[ 'v2' ], triangleProperty[ 'v3' ] );\n\n\t\t\t\t// optional\n\n\t\t\t\tif ( p1 ) {\n\n\t\t\t\t\ttriangleProperty[ 'p1' ] = parseInt( p1, 10 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( p2 ) {\n\n\t\t\t\t\ttriangleProperty[ 'p2' ] = parseInt( p2, 10 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( p3 ) {\n\n\t\t\t\t\ttriangleProperty[ 'p3' ] = parseInt( p3, 10 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( pid ) {\n\n\t\t\t\t\ttriangleProperty[ 'pid' ] = pid;\n\n\t\t\t\t}\n\n\t\t\t\tif ( 0 < Object.keys( triangleProperty ).length ) {\n\n\t\t\t\t\ttriangleProperties.push( triangleProperty );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tmeshData[ 'triangleProperties' ] = triangleProperties;\n\t\t\tmeshData[ 'triangles' ] = new Uint32Array( triangles );\n\n\t\t\treturn meshData;\n\n\t\t}\n\n\t\tfunction parseComponentsNode( componentsNode ) {\n\n\t\t\tconst components = [];\n\n\t\t\tconst componentNodes = componentsNode.querySelectorAll( 'component' );\n\n\t\t\tfor ( let i = 0; i < componentNodes.length; i ++ ) {\n\n\t\t\t\tconst componentNode = componentNodes[ i ];\n\t\t\t\tconst componentData = parseComponentNode( componentNode );\n\t\t\t\tcomponents.push( componentData );\n\n\t\t\t}\n\n\t\t\treturn components;\n\n\t\t}\n\n\t\tfunction parseComponentNode( componentNode ) {\n\n\t\t\tconst componentData = {};\n\n\t\t\tcomponentData[ 'objectId' ] = componentNode.getAttribute( 'objectid' ); // required\n\n\t\t\tconst transform = componentNode.getAttribute( 'transform' );\n\n\t\t\tif ( transform ) {\n\n\t\t\t\tcomponentData[ 'transform' ] = parseTransform( transform );\n\n\t\t\t}\n\n\t\t\treturn componentData;\n\n\t\t}\n\n\t\tfunction parseTransform( transform ) {\n\n\t\t\tconst t = [];\n\t\t\ttransform.split( ' ' ).forEach( function ( s ) {\n\n\t\t\t\tt.push( parseFloat( s ) );\n\n\t\t\t} );\n\n\t\t\tconst matrix = new Matrix4();\n\t\t\tmatrix.set(\n\t\t\t\tt[ 0 ], t[ 3 ], t[ 6 ], t[ 9 ],\n\t\t\t\tt[ 1 ], t[ 4 ], t[ 7 ], t[ 10 ],\n\t\t\t\tt[ 2 ], t[ 5 ], t[ 8 ], t[ 11 ],\n\t\t\t\t 0.0, 0.0, 0.0, 1.0\n\t\t\t);\n\n\t\t\treturn matrix;\n\n\t\t}\n\n\t\tfunction parseObjectNode( objectNode ) {\n\n\t\t\tconst objectData = {\n\t\t\t\ttype: objectNode.getAttribute( 'type' )\n\t\t\t};\n\n\t\t\tconst id = objectNode.getAttribute( 'id' );\n\n\t\t\tif ( id ) {\n\n\t\t\t\tobjectData[ 'id' ] = id;\n\n\t\t\t}\n\n\t\t\tconst pid = objectNode.getAttribute( 'pid' );\n\n\t\t\tif ( pid ) {\n\n\t\t\t\tobjectData[ 'pid' ] = pid;\n\n\t\t\t}\n\n\t\t\tconst pindex = objectNode.getAttribute( 'pindex' );\n\n\t\t\tif ( pindex ) {\n\n\t\t\t\tobjectData[ 'pindex' ] = pindex;\n\n\t\t\t}\n\n\t\t\tconst thumbnail = objectNode.getAttribute( 'thumbnail' );\n\n\t\t\tif ( thumbnail ) {\n\n\t\t\t\tobjectData[ 'thumbnail' ] = thumbnail;\n\n\t\t\t}\n\n\t\t\tconst partnumber = objectNode.getAttribute( 'partnumber' );\n\n\t\t\tif ( partnumber ) {\n\n\t\t\t\tobjectData[ 'partnumber' ] = partnumber;\n\n\t\t\t}\n\n\t\t\tconst name = objectNode.getAttribute( 'name' );\n\n\t\t\tif ( name ) {\n\n\t\t\t\tobjectData[ 'name' ] = name;\n\n\t\t\t}\n\n\t\t\tconst meshNode = objectNode.querySelector( 'mesh' );\n\n\t\t\tif ( meshNode ) {\n\n\t\t\t\tobjectData[ 'mesh' ] = parseMeshNode( meshNode );\n\n\t\t\t}\n\n\t\t\tconst componentsNode = objectNode.querySelector( 'components' );\n\n\t\t\tif ( componentsNode ) {\n\n\t\t\t\tobjectData[ 'components' ] = parseComponentsNode( componentsNode );\n\n\t\t\t}\n\n\t\t\treturn objectData;\n\n\t\t}\n\n\t\tfunction parseResourcesNode( resourcesNode ) {\n\n\t\t\tconst resourcesData = {};\n\n\t\t\tresourcesData[ 'basematerials' ] = {};\n\t\t\tconst basematerialsNodes = resourcesNode.querySelectorAll( 'basematerials' );\n\n\t\t\tfor ( let i = 0; i < basematerialsNodes.length; i ++ ) {\n\n\t\t\t\tconst basematerialsNode = basematerialsNodes[ i ];\n\t\t\t\tconst basematerialsData = parseBasematerialsNode( basematerialsNode );\n\t\t\t\tresourcesData[ 'basematerials' ][ basematerialsData[ 'id' ] ] = basematerialsData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tresourcesData[ 'texture2d' ] = {};\n\t\t\tconst textures2DNodes = resourcesNode.querySelectorAll( 'texture2d' );\n\n\t\t\tfor ( let i = 0; i < textures2DNodes.length; i ++ ) {\n\n\t\t\t\tconst textures2DNode = textures2DNodes[ i ];\n\t\t\t\tconst texture2DData = parseTexture2DNode( textures2DNode );\n\t\t\t\tresourcesData[ 'texture2d' ][ texture2DData[ 'id' ] ] = texture2DData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tresourcesData[ 'colorgroup' ] = {};\n\t\t\tconst colorGroupNodes = resourcesNode.querySelectorAll( 'colorgroup' );\n\n\t\t\tfor ( let i = 0; i < colorGroupNodes.length; i ++ ) {\n\n\t\t\t\tconst colorGroupNode = colorGroupNodes[ i ];\n\t\t\t\tconst colorGroupData = parseColorGroupNode( colorGroupNode );\n\t\t\t\tresourcesData[ 'colorgroup' ][ colorGroupData[ 'id' ] ] = colorGroupData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tresourcesData[ 'pbmetallicdisplayproperties' ] = {};\n\t\t\tconst pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll( 'pbmetallicdisplayproperties' );\n\n\t\t\tfor ( let i = 0; i < pbmetallicdisplaypropertiesNodes.length; i ++ ) {\n\n\t\t\t\tconst pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[ i ];\n\t\t\t\tconst pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode( pbmetallicdisplaypropertiesNode );\n\t\t\t\tresourcesData[ 'pbmetallicdisplayproperties' ][ pbmetallicdisplaypropertiesData[ 'id' ] ] = pbmetallicdisplaypropertiesData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tresourcesData[ 'texture2dgroup' ] = {};\n\t\t\tconst textures2DGroupNodes = resourcesNode.querySelectorAll( 'texture2dgroup' );\n\n\t\t\tfor ( let i = 0; i < textures2DGroupNodes.length; i ++ ) {\n\n\t\t\t\tconst textures2DGroupNode = textures2DGroupNodes[ i ];\n\t\t\t\tconst textures2DGroupData = parseTextures2DGroupNode( textures2DGroupNode );\n\t\t\t\tresourcesData[ 'texture2dgroup' ][ textures2DGroupData[ 'id' ] ] = textures2DGroupData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tresourcesData[ 'object' ] = {};\n\t\t\tconst objectNodes = resourcesNode.querySelectorAll( 'object' );\n\n\t\t\tfor ( let i = 0; i < objectNodes.length; i ++ ) {\n\n\t\t\t\tconst objectNode = objectNodes[ i ];\n\t\t\t\tconst objectData = parseObjectNode( objectNode );\n\t\t\t\tresourcesData[ 'object' ][ objectData[ 'id' ] ] = objectData;\n\n\t\t\t}\n\n\t\t\treturn resourcesData;\n\n\t\t}\n\n\t\tfunction parseBuildNode( buildNode ) {\n\n\t\t\tconst buildData = [];\n\t\t\tconst itemNodes = buildNode.querySelectorAll( 'item' );\n\n\t\t\tfor ( let i = 0; i < itemNodes.length; i ++ ) {\n\n\t\t\t\tconst itemNode = itemNodes[ i ];\n\t\t\t\tconst buildItem = {\n\t\t\t\t\tobjectId: itemNode.getAttribute( 'objectid' )\n\t\t\t\t};\n\t\t\t\tconst transform = itemNode.getAttribute( 'transform' );\n\n\t\t\t\tif ( transform ) {\n\n\t\t\t\t\tbuildItem[ 'transform' ] = parseTransform( transform );\n\n\t\t\t\t}\n\n\t\t\t\tbuildData.push( buildItem );\n\n\t\t\t}\n\n\t\t\treturn buildData;\n\n\t\t}\n\n\t\tfunction parseModelNode( modelNode ) {\n\n\t\t\tconst modelData = { unit: modelNode.getAttribute( 'unit' ) || 'millimeter' };\n\t\t\tconst metadataNodes = modelNode.querySelectorAll( 'metadata' );\n\n\t\t\tif ( metadataNodes ) {\n\n\t\t\t\tmodelData[ 'metadata' ] = parseMetadataNodes( metadataNodes );\n\n\t\t\t}\n\n\t\t\tconst resourcesNode = modelNode.querySelector( 'resources' );\n\n\t\t\tif ( resourcesNode ) {\n\n\t\t\t\tmodelData[ 'resources' ] = parseResourcesNode( resourcesNode );\n\n\t\t\t}\n\n\t\t\tconst buildNode = modelNode.querySelector( 'build' );\n\n\t\t\tif ( buildNode ) {\n\n\t\t\t\tmodelData[ 'build' ] = parseBuildNode( buildNode );\n\n\t\t\t}\n\n\t\t\treturn modelData;\n\n\t\t}\n\n\t\tfunction buildTexture( texture2dgroup, objects, modelData, textureData ) {\n\n\t\t\tconst texid = texture2dgroup.texid;\n\t\t\tconst texture2ds = modelData.resources.texture2d;\n\t\t\tconst texture2d = texture2ds[ texid ];\n\n\t\t\tif ( texture2d ) {\n\n\t\t\t\tconst data = textureData[ texture2d.path ];\n\t\t\t\tconst type = texture2d.contenttype;\n\n\t\t\t\tconst blob = new Blob( [ data ], { type: type } );\n\t\t\t\tconst sourceURI = URL.createObjectURL( blob );\n\n\t\t\t\tconst texture = textureLoader.load( sourceURI, function () {\n\n\t\t\t\t\tURL.revokeObjectURL( sourceURI );\n\n\t\t\t\t} );\n\n\t\t\t\ttexture.colorSpace = COLOR_SPACE_3MF;\n\n\t\t\t\t// texture parameters\n\n\t\t\t\tswitch ( texture2d.tilestyleu ) {\n\n\t\t\t\t\tcase 'wrap':\n\t\t\t\t\t\ttexture.wrapS = RepeatWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'mirror':\n\t\t\t\t\t\ttexture.wrapS = MirroredRepeatWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'none':\n\t\t\t\t\tcase 'clamp':\n\t\t\t\t\t\ttexture.wrapS = ClampToEdgeWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ttexture.wrapS = RepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tswitch ( texture2d.tilestylev ) {\n\n\t\t\t\t\tcase 'wrap':\n\t\t\t\t\t\ttexture.wrapT = RepeatWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'mirror':\n\t\t\t\t\t\ttexture.wrapT = MirroredRepeatWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'none':\n\t\t\t\t\tcase 'clamp':\n\t\t\t\t\t\ttexture.wrapT = ClampToEdgeWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ttexture.wrapT = RepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tswitch ( texture2d.filter ) {\n\n\t\t\t\t\tcase 'auto':\n\t\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'linear':\n\t\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'nearest':\n\t\t\t\t\t\ttexture.magFilter = NearestFilter;\n\t\t\t\t\t\ttexture.minFilter = NearestFilter;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\treturn texture;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction buildBasematerialsMeshes( basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData ) {\n\n\t\t\tconst objectPindex = objectData.pindex;\n\n\t\t\tconst materialMap = {};\n\n\t\t\tfor ( let i = 0, l = triangleProperties.length; i < l; i ++ ) {\n\n\t\t\t\tconst triangleProperty = triangleProperties[ i ];\n\t\t\t\tconst pindex = ( triangleProperty.p1 !== undefined ) ? triangleProperty.p1 : objectPindex;\n\n\t\t\t\tif ( materialMap[ pindex ] === undefined ) materialMap[ pindex ] = [];\n\n\t\t\t\tmaterialMap[ pindex ].push( triangleProperty );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst keys = Object.keys( materialMap );\n\t\t\tconst meshes = [];\n\n\t\t\tfor ( let i = 0, l = keys.length; i < l; i ++ ) {\n\n\t\t\t\tconst materialIndex = keys[ i ];\n\t\t\t\tconst trianglePropertiesProps = materialMap[ materialIndex ];\n\t\t\t\tconst basematerialData = basematerials.basematerials[ materialIndex ];\n\t\t\t\tconst material = getBuild( basematerialData, objects, modelData, textureData, objectData, buildBasematerial );\n\n\t\t\t\t//\n\n\t\t\t\tconst geometry = new BufferGeometry();\n\n\t\t\t\tconst positionData = [];\n\n\t\t\t\tconst vertices = meshData.vertices;\n\n\t\t\t\tfor ( let j = 0, jl = trianglePropertiesProps.length; j < jl; j ++ ) {\n\n\t\t\t\t\tconst triangleProperty = trianglePropertiesProps[ j ];\n\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 0 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 1 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 2 ] );\n\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 0 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 1 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 2 ] );\n\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 0 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 1 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 2 ] );\n\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positionData, 3 ) );\n\n\t\t\t\t//\n\n\t\t\t\tconst mesh = new Mesh( geometry, material );\n\t\t\t\tmeshes.push( mesh );\n\n\t\t\t}\n\n\t\t\treturn meshes;\n\n\t\t}\n\n\t\tfunction buildTexturedMesh( texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData ) {\n\n\t\t\t// geometry\n\n\t\t\tconst geometry = new BufferGeometry();\n\n\t\t\tconst positionData = [];\n\t\t\tconst uvData = [];\n\n\t\t\tconst vertices = meshData.vertices;\n\t\t\tconst uvs = texture2dgroup.uvs;\n\n\t\t\tfor ( let i = 0, l = triangleProperties.length; i < l; i ++ ) {\n\n\t\t\t\tconst triangleProperty = triangleProperties[ i ];\n\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 0 ] );\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 1 ] );\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 2 ] );\n\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 0 ] );\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 1 ] );\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 2 ] );\n\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 0 ] );\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 1 ] );\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 2 ] );\n\n\t\t\t\t//\n\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p1 * 2 ) + 0 ] );\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p1 * 2 ) + 1 ] );\n\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p2 * 2 ) + 0 ] );\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p2 * 2 ) + 1 ] );\n\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p3 * 2 ) + 0 ] );\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p3 * 2 ) + 1 ] );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positionData, 3 ) );\n\t\t\tgeometry.setAttribute( 'uv', new Float32BufferAttribute( uvData, 2 ) );\n\n\t\t\t// material\n\n\t\t\tconst texture = getBuild( texture2dgroup, objects, modelData, textureData, objectData, buildTexture );\n\n\t\t\tconst material = new MeshPhongMaterial( { map: texture, flatShading: true } );\n\n\t\t\t// mesh\n\n\t\t\tconst mesh = new Mesh( geometry, material );\n\n\t\t\treturn mesh;\n\n\t\t}\n\n\t\tfunction buildVertexColorMesh( colorgroup, triangleProperties, meshData, objectData ) {\n\n\t\t\t// geometry\n\n\t\t\tconst geometry = new BufferGeometry();\n\n\t\t\tconst positionData = [];\n\t\t\tconst colorData = [];\n\n\t\t\tconst vertices = meshData.vertices;\n\t\t\tconst colors = colorgroup.colors;\n\n\t\t\tfor ( let i = 0, l = triangleProperties.length; i < l; i ++ ) {\n\n\t\t\t\tconst triangleProperty = triangleProperties[ i ];\n\n\t\t\t\tconst v1 = triangleProperty.v1;\n\t\t\t\tconst v2 = triangleProperty.v2;\n\t\t\t\tconst v3 = triangleProperty.v3;\n\n\t\t\t\tpositionData.push( vertices[ ( v1 * 3 ) + 0 ] );\n\t\t\t\tpositionData.push( vertices[ ( v1 * 3 ) + 1 ] );\n\t\t\t\tpositionData.push( vertices[ ( v1 * 3 ) + 2 ] );\n\n\t\t\t\tpositionData.push( vertices[ ( v2 * 3 ) + 0 ] );\n\t\t\t\tpositionData.push( vertices[ ( v2 * 3 ) + 1 ] );\n\t\t\t\tpositionData.push( vertices[ ( v2 * 3 ) + 2 ] );\n\n\t\t\t\tpositionData.push( vertices[ ( v3 * 3 ) + 0 ] );\n\t\t\t\tpositionData.push( vertices[ ( v3 * 3 ) + 1 ] );\n\t\t\t\tpositionData.push( vertices[ ( v3 * 3 ) + 2 ] );\n\n\t\t\t\t//\n\n\t\t\t\tconst p1 = ( triangleProperty.p1 !== undefined ) ? triangleProperty.p1 : objectData.pindex;\n\t\t\t\tconst p2 = ( triangleProperty.p2 !== undefined ) ? triangleProperty.p2 : p1;\n\t\t\t\tconst p3 = ( triangleProperty.p3 !== undefined ) ? triangleProperty.p3 : p1;\n\n\t\t\t\tcolorData.push( colors[ ( p1 * 3 ) + 0 ] );\n\t\t\t\tcolorData.push( colors[ ( p1 * 3 ) + 1 ] );\n\t\t\t\tcolorData.push( colors[ ( p1 * 3 ) + 2 ] );\n\n\t\t\t\tcolorData.push( colors[ ( p2 * 3 ) + 0 ] );\n\t\t\t\tcolorData.push( colors[ ( p2 * 3 ) + 1 ] );\n\t\t\t\tcolorData.push( colors[ ( p2 * 3 ) + 2 ] );\n\n\t\t\t\tcolorData.push( colors[ ( p3 * 3 ) + 0 ] );\n\t\t\t\tcolorData.push( colors[ ( p3 * 3 ) + 1 ] );\n\t\t\t\tcolorData.push( colors[ ( p3 * 3 ) + 2 ] );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positionData, 3 ) );\n\t\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colorData, 3 ) );\n\n\t\t\t// material\n\n\t\t\tconst material = new MeshPhongMaterial( { vertexColors: true, flatShading: true } );\n\n\t\t\t// mesh\n\n\t\t\tconst mesh = new Mesh( geometry, material );\n\n\t\t\treturn mesh;\n\n\t\t}\n\n\t\tfunction buildDefaultMesh( meshData ) {\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex( new BufferAttribute( meshData[ 'triangles' ], 1 ) );\n\t\t\tgeometry.setAttribute( 'position', new BufferAttribute( meshData[ 'vertices' ], 3 ) );\n\n\t\t\tconst material = new MeshPhongMaterial( {\n\t\t\t\tname: Loader.DEFAULT_MATERIAL_NAME,\n\t\t\t\tcolor: 0xffffff,\n\t\t\t\tflatShading: true\n\t\t\t} );\n\n\t\t\tconst mesh = new Mesh( geometry, material );\n\n\t\t\treturn mesh;\n\n\t\t}\n\n\t\tfunction buildMeshes( resourceMap, meshData, objects, modelData, textureData, objectData ) {\n\n\t\t\tconst keys = Object.keys( resourceMap );\n\t\t\tconst meshes = [];\n\n\t\t\tfor ( let i = 0, il = keys.length; i < il; i ++ ) {\n\n\t\t\t\tconst resourceId = keys[ i ];\n\t\t\t\tconst triangleProperties = resourceMap[ resourceId ];\n\t\t\t\tconst resourceType = getResourceType( resourceId, modelData );\n\n\t\t\t\tswitch ( resourceType ) {\n\n\t\t\t\t\tcase 'material':\n\t\t\t\t\t\tconst basematerials = modelData.resources.basematerials[ resourceId ];\n\t\t\t\t\t\tconst newMeshes = buildBasematerialsMeshes( basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = newMeshes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tmeshes.push( newMeshes[ j ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'texture':\n\t\t\t\t\t\tconst texture2dgroup = modelData.resources.texture2dgroup[ resourceId ];\n\t\t\t\t\t\tmeshes.push( buildTexturedMesh( texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'vertexColors':\n\t\t\t\t\t\tconst colorgroup = modelData.resources.colorgroup[ resourceId ];\n\t\t\t\t\t\tmeshes.push( buildVertexColorMesh( colorgroup, triangleProperties, meshData, objectData ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'default':\n\t\t\t\t\t\tmeshes.push( buildDefaultMesh( meshData ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'THREE.3MFLoader: Unsupported resource type.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( objectData.name ) {\n\n\t\t\t\tfor ( let i = 0; i < meshes.length; i ++ ) {\n\n\t\t\t\t\tmeshes[ i ].name = objectData.name;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn meshes;\n\n\t\t}\n\n\t\tfunction getResourceType( pid, modelData ) {\n\n\t\t\tif ( modelData.resources.texture2dgroup[ pid ] !== undefined ) {\n\n\t\t\t\treturn 'texture';\n\n\t\t\t} else if ( modelData.resources.basematerials[ pid ] !== undefined ) {\n\n\t\t\t\treturn 'material';\n\n\t\t\t} else if ( modelData.resources.colorgroup[ pid ] !== undefined ) {\n\n\t\t\t\treturn 'vertexColors';\n\n\t\t\t} else if ( pid === 'default' ) {\n\n\t\t\t\treturn 'default';\n\n\t\t\t} else {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction analyzeObject( meshData, objectData ) {\n\n\t\t\tconst resourceMap = {};\n\n\t\t\tconst triangleProperties = meshData[ 'triangleProperties' ];\n\n\t\t\tconst objectPid = objectData.pid;\n\n\t\t\tfor ( let i = 0, l = triangleProperties.length; i < l; i ++ ) {\n\n\t\t\t\tconst triangleProperty = triangleProperties[ i ];\n\t\t\t\tlet pid = ( triangleProperty.pid !== undefined ) ? triangleProperty.pid : objectPid;\n\n\t\t\t\tif ( pid === undefined ) pid = 'default';\n\n\t\t\t\tif ( resourceMap[ pid ] === undefined ) resourceMap[ pid ] = [];\n\n\t\t\t\tresourceMap[ pid ].push( triangleProperty );\n\n\t\t\t}\n\n\t\t\treturn resourceMap;\n\n\t\t}\n\n\t\tfunction buildGroup( meshData, objects, modelData, textureData, objectData ) {\n\n\t\t\tconst group = new Group();\n\n\t\t\tconst resourceMap = analyzeObject( meshData, objectData );\n\t\t\tconst meshes = buildMeshes( resourceMap, meshData, objects, modelData, textureData, objectData );\n\n\t\t\tfor ( let i = 0, l = meshes.length; i < l; i ++ ) {\n\n\t\t\t\tgroup.add( meshes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn group;\n\n\t\t}\n\n\t\tfunction applyExtensions( extensions, meshData, modelXml ) {\n\n\t\t\tif ( ! extensions ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst availableExtensions = [];\n\t\t\tconst keys = Object.keys( extensions );\n\n\t\t\tfor ( let i = 0; i < keys.length; i ++ ) {\n\n\t\t\t\tconst ns = keys[ i ];\n\n\t\t\t\tfor ( let j = 0; j < scope.availableExtensions.length; j ++ ) {\n\n\t\t\t\t\tconst extension = scope.availableExtensions[ j ];\n\n\t\t\t\t\tif ( extension.ns === ns ) {\n\n\t\t\t\t\t\tavailableExtensions.push( extension );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0; i < availableExtensions.length; i ++ ) {\n\n\t\t\t\tconst extension = availableExtensions[ i ];\n\t\t\t\textension.apply( modelXml, extensions[ extension[ 'ns' ] ], meshData );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getBuild( data, objects, modelData, textureData, objectData, builder ) {\n\n\t\t\tif ( data.build !== undefined ) return data.build;\n\n\t\t\tdata.build = builder( data, objects, modelData, textureData, objectData );\n\n\t\t\treturn data.build;\n\n\t\t}\n\n\t\tfunction buildBasematerial( materialData, objects, modelData ) {\n\n\t\t\tlet material;\n\n\t\t\tconst displaypropertiesid = materialData.displaypropertiesid;\n\t\t\tconst pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n\n\t\t\tif ( displaypropertiesid !== null && pbmetallicdisplayproperties[ displaypropertiesid ] !== undefined ) {\n\n\t\t\t\t// metallic display property, use StandardMaterial\n\n\t\t\t\tconst pbmetallicdisplayproperty = pbmetallicdisplayproperties[ displaypropertiesid ];\n\t\t\t\tconst metallicData = pbmetallicdisplayproperty.data[ materialData.index ];\n\n\t\t\t\tmaterial = new MeshStandardMaterial( { flatShading: true, roughness: metallicData.roughness, metalness: metallicData.metallicness } );\n\n\t\t\t} else {\n\n\t\t\t\t// otherwise use PhongMaterial\n\n\t\t\t\tmaterial = new MeshPhongMaterial( { flatShading: true } );\n\n\t\t\t}\n\n\t\t\tmaterial.name = materialData.name;\n\n\t\t\t// displaycolor MUST be specified with a value of a 6 or 8 digit hexadecimal number, e.g. \"#RRGGBB\" or \"#RRGGBBAA\"\n\n\t\t\tconst displaycolor = materialData.displaycolor;\n\n\t\t\tconst color = displaycolor.substring( 0, 7 );\n\t\t\tmaterial.color.setStyle( color, COLOR_SPACE_3MF );\n\n\t\t\t// process alpha if set\n\n\t\t\tif ( displaycolor.length === 9 ) {\n\n\t\t\t\tmaterial.opacity = parseInt( displaycolor.charAt( 7 ) + displaycolor.charAt( 8 ), 16 ) / 255;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction buildComposite( compositeData, objects, modelData, textureData ) {\n\n\t\t\tconst composite = new Group();\n\n\t\t\tfor ( let j = 0; j < compositeData.length; j ++ ) {\n\n\t\t\t\tconst component = compositeData[ j ];\n\t\t\t\tlet build = objects[ component.objectId ];\n\n\t\t\t\tif ( build === undefined ) {\n\n\t\t\t\t\tbuildObject( component.objectId, objects, modelData, textureData );\n\t\t\t\t\tbuild = objects[ component.objectId ];\n\n\t\t\t\t}\n\n\t\t\t\tconst object3D = build.clone();\n\n\t\t\t\t// apply component transform\n\n\t\t\t\tconst transform = component.transform;\n\n\t\t\t\tif ( transform ) {\n\n\t\t\t\t\tobject3D.applyMatrix4( transform );\n\n\t\t\t\t}\n\n\t\t\t\tcomposite.add( object3D );\n\n\t\t\t}\n\n\t\t\treturn composite;\n\n\t\t}\n\n\t\tfunction buildObject( objectId, objects, modelData, textureData ) {\n\n\t\t\tconst objectData = modelData[ 'resources' ][ 'object' ][ objectId ];\n\n\t\t\tif ( objectData[ 'mesh' ] ) {\n\n\t\t\t\tconst meshData = objectData[ 'mesh' ];\n\n\t\t\t\tconst extensions = modelData[ 'extensions' ];\n\t\t\t\tconst modelXml = modelData[ 'xml' ];\n\n\t\t\t\tapplyExtensions( extensions, meshData, modelXml );\n\n\t\t\t\tobjects[ objectData.id ] = getBuild( meshData, objects, modelData, textureData, objectData, buildGroup );\n\n\t\t\t} else {\n\n\t\t\t\tconst compositeData = objectData[ 'components' ];\n\n\t\t\t\tobjects[ objectData.id ] = getBuild( compositeData, objects, modelData, textureData, objectData, buildComposite );\n\n\t\t\t}\n\n\t\t\tif ( objectData.name ) {\n\n\t\t\t\tobjects[ objectData.id ].name = objectData.name;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction buildObjects( data3mf ) {\n\n\t\t\tconst modelsData = data3mf.model;\n\t\t\tconst modelRels = data3mf.modelRels;\n\t\t\tconst objects = {};\n\t\t\tconst modelsKeys = Object.keys( modelsData );\n\t\t\tconst textureData = {};\n\n\t\t\t// evaluate model relationships to textures\n\n\t\t\tif ( modelRels ) {\n\n\t\t\t\tfor ( let i = 0, l = modelRels.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst modelRel = modelRels[ i ];\n\t\t\t\t\tconst textureKey = modelRel.target.substring( 1 );\n\n\t\t\t\t\tif ( data3mf.texture[ textureKey ] ) {\n\n\t\t\t\t\t\ttextureData[ modelRel.target ] = data3mf.texture[ textureKey ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// start build\n\n\t\t\tfor ( let i = 0; i < modelsKeys.length; i ++ ) {\n\n\t\t\t\tconst modelsKey = modelsKeys[ i ];\n\t\t\t\tconst modelData = modelsData[ modelsKey ];\n\n\t\t\t\tconst objectIds = Object.keys( modelData[ 'resources' ][ 'object' ] );\n\n\t\t\t\tfor ( let j = 0; j < objectIds.length; j ++ ) {\n\n\t\t\t\t\tconst objectId = objectIds[ j ];\n\n\t\t\t\t\tbuildObject( objectId, objects, modelData, textureData );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn objects;\n\n\t\t}\n\n\t\tfunction fetch3DModelPart( rels ) {\n\n\t\t\tfor ( let i = 0; i < rels.length; i ++ ) {\n\n\t\t\t\tconst rel = rels[ i ];\n\t\t\t\tconst extension = rel.target.split( '.' ).pop();\n\n\t\t\t\tif ( extension.toLowerCase() === 'model' ) return rel;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction build( objects, data3mf ) {\n\n\t\t\tconst group = new Group();\n\n\t\t\tconst relationship = fetch3DModelPart( data3mf[ 'rels' ] );\n\t\t\tconst buildData = data3mf.model[ relationship[ 'target' ].substring( 1 ) ][ 'build' ];\n\n\t\t\tfor ( let i = 0; i < buildData.length; i ++ ) {\n\n\t\t\t\tconst buildItem = buildData[ i ];\n\t\t\t\tconst object3D = objects[ buildItem[ 'objectId' ] ].clone();\n\n\t\t\t\t// apply transform\n\n\t\t\t\tconst transform = buildItem[ 'transform' ];\n\n\t\t\t\tif ( transform ) {\n\n\t\t\t\t\tobject3D.applyMatrix4( transform );\n\n\t\t\t\t}\n\n\t\t\t\tgroup.add( object3D );\n\n\t\t\t}\n\n\t\t\treturn group;\n\n\t\t}\n\n\t\tconst data3mf = loadDocument( data );\n\t\tconst objects = buildObjects( data3mf );\n\n\t\treturn build( objects, data3mf );\n\n\t}\n\n\taddExtension( extension ) {\n\n\t\tthis.availableExtensions.push( extension );\n\n\t}\n\n}\n\nexport { ThreeMFLoader };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}