{"ast":null,"code":"import { BufferGeometry, Color, FileLoader, Float32BufferAttribute, Group, Loader, Mesh, MeshPhongMaterial } from 'three';\nimport * as fflate from '../libs/fflate.module.js';\n\n/**\n * Description: Early release of an AMF Loader following the pattern of the\n * example loaders in the three.js project.\n *\n * Usage:\n *\tconst loader = new AMFLoader();\n *\tloader.load('/path/to/project.amf', function(objecttree) {\n *\t\tscene.add(objecttree);\n *\t});\n *\n * Materials now supported, material colors supported\n * Zip support, requires fflate\n * No constellation support (yet)!\n *\n */\n\nclass AMFLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(data) {\n    function loadDocument(data) {\n      let view = new DataView(data);\n      const magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\n      if (magic === 'PK') {\n        let zip = null;\n        let file = null;\n        console.log('THREE.AMFLoader: Loading Zip');\n        try {\n          zip = fflate.unzipSync(new Uint8Array(data));\n        } catch (e) {\n          if (e instanceof ReferenceError) {\n            console.log('THREE.AMFLoader: fflate missing and file is compressed.');\n            return null;\n          }\n        }\n        for (file in zip) {\n          if (file.toLowerCase().slice(-4) === '.amf') {\n            break;\n          }\n        }\n        console.log('THREE.AMFLoader: Trying to load file asset: ' + file);\n        view = new DataView(zip[file].buffer);\n      }\n      const fileText = new TextDecoder().decode(view);\n      const xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n      if (xmlData.documentElement.nodeName.toLowerCase() !== 'amf') {\n        console.log('THREE.AMFLoader: Error loading AMF - no AMF document found.');\n        return null;\n      }\n      return xmlData;\n    }\n    function loadDocumentScale(node) {\n      let scale = 1.0;\n      let unit = 'millimeter';\n      if (node.documentElement.attributes.unit !== undefined) {\n        unit = node.documentElement.attributes.unit.value.toLowerCase();\n      }\n      const scaleUnits = {\n        millimeter: 1.0,\n        inch: 25.4,\n        feet: 304.8,\n        meter: 1000.0,\n        micron: 0.001\n      };\n      if (scaleUnits[unit] !== undefined) {\n        scale = scaleUnits[unit];\n      }\n      console.log('THREE.AMFLoader: Unit scale: ' + scale);\n      return scale;\n    }\n    function loadMaterials(node) {\n      let matName = 'AMF Material';\n      const matId = node.attributes.id.textContent;\n      let color = {\n        r: 1.0,\n        g: 1.0,\n        b: 1.0,\n        a: 1.0\n      };\n      let loadedMaterial = null;\n      for (let i = 0; i < node.childNodes.length; i++) {\n        const matChildEl = node.childNodes[i];\n        if (matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined) {\n          if (matChildEl.attributes.type.value === 'name') {\n            matName = matChildEl.textContent;\n          }\n        } else if (matChildEl.nodeName === 'color') {\n          color = loadColor(matChildEl);\n        }\n      }\n      loadedMaterial = new MeshPhongMaterial({\n        flatShading: true,\n        color: new Color(color.r, color.g, color.b),\n        name: matName\n      });\n      if (color.a !== 1.0) {\n        loadedMaterial.transparent = true;\n        loadedMaterial.opacity = color.a;\n      }\n      return {\n        id: matId,\n        material: loadedMaterial\n      };\n    }\n    function loadColor(node) {\n      const color = {\n        r: 1.0,\n        g: 1.0,\n        b: 1.0,\n        a: 1.0\n      };\n      for (let i = 0; i < node.childNodes.length; i++) {\n        const matColor = node.childNodes[i];\n        if (matColor.nodeName === 'r') {\n          color.r = matColor.textContent;\n        } else if (matColor.nodeName === 'g') {\n          color.g = matColor.textContent;\n        } else if (matColor.nodeName === 'b') {\n          color.b = matColor.textContent;\n        } else if (matColor.nodeName === 'a') {\n          color.a = matColor.textContent;\n        }\n      }\n      return color;\n    }\n    function loadMeshVolume(node) {\n      const volume = {\n        name: '',\n        triangles: [],\n        materialid: null\n      };\n      let currVolumeNode = node.firstElementChild;\n      if (node.attributes.materialid !== undefined) {\n        volume.materialId = node.attributes.materialid.nodeValue;\n      }\n      while (currVolumeNode) {\n        if (currVolumeNode.nodeName === 'metadata') {\n          if (currVolumeNode.attributes.type !== undefined) {\n            if (currVolumeNode.attributes.type.value === 'name') {\n              volume.name = currVolumeNode.textContent;\n            }\n          }\n        } else if (currVolumeNode.nodeName === 'triangle') {\n          const v1 = currVolumeNode.getElementsByTagName('v1')[0].textContent;\n          const v2 = currVolumeNode.getElementsByTagName('v2')[0].textContent;\n          const v3 = currVolumeNode.getElementsByTagName('v3')[0].textContent;\n          volume.triangles.push(v1, v2, v3);\n        }\n        currVolumeNode = currVolumeNode.nextElementSibling;\n      }\n      return volume;\n    }\n    function loadMeshVertices(node) {\n      const vertArray = [];\n      const normalArray = [];\n      let currVerticesNode = node.firstElementChild;\n      while (currVerticesNode) {\n        if (currVerticesNode.nodeName === 'vertex') {\n          let vNode = currVerticesNode.firstElementChild;\n          while (vNode) {\n            if (vNode.nodeName === 'coordinates') {\n              const x = vNode.getElementsByTagName('x')[0].textContent;\n              const y = vNode.getElementsByTagName('y')[0].textContent;\n              const z = vNode.getElementsByTagName('z')[0].textContent;\n              vertArray.push(x, y, z);\n            } else if (vNode.nodeName === 'normal') {\n              const nx = vNode.getElementsByTagName('nx')[0].textContent;\n              const ny = vNode.getElementsByTagName('ny')[0].textContent;\n              const nz = vNode.getElementsByTagName('nz')[0].textContent;\n              normalArray.push(nx, ny, nz);\n            }\n            vNode = vNode.nextElementSibling;\n          }\n        }\n        currVerticesNode = currVerticesNode.nextElementSibling;\n      }\n      return {\n        'vertices': vertArray,\n        'normals': normalArray\n      };\n    }\n    function loadObject(node) {\n      const objId = node.attributes.id.textContent;\n      const loadedObject = {\n        name: 'amfobject',\n        meshes: []\n      };\n      let currColor = null;\n      let currObjNode = node.firstElementChild;\n      while (currObjNode) {\n        if (currObjNode.nodeName === 'metadata') {\n          if (currObjNode.attributes.type !== undefined) {\n            if (currObjNode.attributes.type.value === 'name') {\n              loadedObject.name = currObjNode.textContent;\n            }\n          }\n        } else if (currObjNode.nodeName === 'color') {\n          currColor = loadColor(currObjNode);\n        } else if (currObjNode.nodeName === 'mesh') {\n          let currMeshNode = currObjNode.firstElementChild;\n          const mesh = {\n            vertices: [],\n            normals: [],\n            volumes: [],\n            color: currColor\n          };\n          while (currMeshNode) {\n            if (currMeshNode.nodeName === 'vertices') {\n              const loadedVertices = loadMeshVertices(currMeshNode);\n              mesh.normals = mesh.normals.concat(loadedVertices.normals);\n              mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\n            } else if (currMeshNode.nodeName === 'volume') {\n              mesh.volumes.push(loadMeshVolume(currMeshNode));\n            }\n            currMeshNode = currMeshNode.nextElementSibling;\n          }\n          loadedObject.meshes.push(mesh);\n        }\n        currObjNode = currObjNode.nextElementSibling;\n      }\n      return {\n        'id': objId,\n        'obj': loadedObject\n      };\n    }\n    const xmlData = loadDocument(data);\n    let amfName = '';\n    let amfAuthor = '';\n    const amfScale = loadDocumentScale(xmlData);\n    const amfMaterials = {};\n    const amfObjects = {};\n    const childNodes = xmlData.documentElement.childNodes;\n    let i, j;\n    for (i = 0; i < childNodes.length; i++) {\n      const child = childNodes[i];\n      if (child.nodeName === 'metadata') {\n        if (child.attributes.type !== undefined) {\n          if (child.attributes.type.value === 'name') {\n            amfName = child.textContent;\n          } else if (child.attributes.type.value === 'author') {\n            amfAuthor = child.textContent;\n          }\n        }\n      } else if (child.nodeName === 'material') {\n        const loadedMaterial = loadMaterials(child);\n        amfMaterials[loadedMaterial.id] = loadedMaterial.material;\n      } else if (child.nodeName === 'object') {\n        const loadedObject = loadObject(child);\n        amfObjects[loadedObject.id] = loadedObject.obj;\n      }\n    }\n    const sceneObject = new Group();\n    const defaultMaterial = new MeshPhongMaterial({\n      name: Loader.DEFAULT_MATERIAL_NAME,\n      color: 0xaaaaff,\n      flatShading: true\n    });\n    sceneObject.name = amfName;\n    sceneObject.userData.author = amfAuthor;\n    sceneObject.userData.loader = 'AMF';\n    for (const id in amfObjects) {\n      const part = amfObjects[id];\n      const meshes = part.meshes;\n      const newObject = new Group();\n      newObject.name = part.name || '';\n      for (i = 0; i < meshes.length; i++) {\n        let objDefaultMaterial = defaultMaterial;\n        const mesh = meshes[i];\n        const vertices = new Float32BufferAttribute(mesh.vertices, 3);\n        let normals = null;\n        if (mesh.normals.length) {\n          normals = new Float32BufferAttribute(mesh.normals, 3);\n        }\n        if (mesh.color) {\n          const color = mesh.color;\n          objDefaultMaterial = defaultMaterial.clone();\n          objDefaultMaterial.color = new Color(color.r, color.g, color.b);\n          if (color.a !== 1.0) {\n            objDefaultMaterial.transparent = true;\n            objDefaultMaterial.opacity = color.a;\n          }\n        }\n        const volumes = mesh.volumes;\n        for (j = 0; j < volumes.length; j++) {\n          const volume = volumes[j];\n          const newGeometry = new BufferGeometry();\n          let material = objDefaultMaterial;\n          newGeometry.setIndex(volume.triangles);\n          newGeometry.setAttribute('position', vertices.clone());\n          if (normals) {\n            newGeometry.setAttribute('normal', normals.clone());\n          }\n          if (amfMaterials[volume.materialId] !== undefined) {\n            material = amfMaterials[volume.materialId];\n          }\n          newGeometry.scale(amfScale, amfScale, amfScale);\n          newObject.add(new Mesh(newGeometry, material.clone()));\n        }\n      }\n      sceneObject.add(newObject);\n    }\n    return sceneObject;\n  }\n}\nexport { AMFLoader };","map":{"version":3,"names":["BufferGeometry","Color","FileLoader","Float32BufferAttribute","Group","Loader","Mesh","MeshPhongMaterial","fflate","AMFLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","loadDocument","view","DataView","magic","String","fromCharCode","getUint8","zip","file","log","unzipSync","Uint8Array","ReferenceError","toLowerCase","slice","buffer","fileText","TextDecoder","decode","xmlData","DOMParser","parseFromString","documentElement","nodeName","loadDocumentScale","node","scale","unit","attributes","undefined","value","scaleUnits","millimeter","inch","feet","meter","micron","loadMaterials","matName","matId","id","textContent","color","r","g","b","a","loadedMaterial","i","childNodes","length","matChildEl","type","loadColor","flatShading","name","transparent","opacity","material","matColor","loadMeshVolume","volume","triangles","materialid","currVolumeNode","firstElementChild","materialId","nodeValue","v1","getElementsByTagName","v2","v3","push","nextElementSibling","loadMeshVertices","vertArray","normalArray","currVerticesNode","vNode","x","y","z","nx","ny","nz","loadObject","objId","loadedObject","meshes","currColor","currObjNode","currMeshNode","mesh","vertices","normals","volumes","loadedVertices","concat","amfName","amfAuthor","amfScale","amfMaterials","amfObjects","j","child","obj","sceneObject","defaultMaterial","DEFAULT_MATERIAL_NAME","userData","author","part","newObject","objDefaultMaterial","clone","newGeometry","setIndex","setAttribute","add"],"sources":["D:/project/client/node_modules/three/examples/jsm/loaders/AMFLoader.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tColor,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tGroup,\n\tLoader,\n\tMesh,\n\tMeshPhongMaterial\n} from 'three';\nimport * as fflate from '../libs/fflate.module.js';\n\n/**\n * Description: Early release of an AMF Loader following the pattern of the\n * example loaders in the three.js project.\n *\n * Usage:\n *\tconst loader = new AMFLoader();\n *\tloader.load('/path/to/project.amf', function(objecttree) {\n *\t\tscene.add(objecttree);\n *\t});\n *\n * Materials now supported, material colors supported\n * Zip support, requires fflate\n * No constellation support (yet)!\n *\n */\n\nclass AMFLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( data ) {\n\n\t\tfunction loadDocument( data ) {\n\n\t\t\tlet view = new DataView( data );\n\t\t\tconst magic = String.fromCharCode( view.getUint8( 0 ), view.getUint8( 1 ) );\n\n\t\t\tif ( magic === 'PK' ) {\n\n\t\t\t\tlet zip = null;\n\t\t\t\tlet file = null;\n\n\t\t\t\tconsole.log( 'THREE.AMFLoader: Loading Zip' );\n\n\t\t\t\ttry {\n\n\t\t\t\t\tzip = fflate.unzipSync( new Uint8Array( data ) );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tif ( e instanceof ReferenceError ) {\n\n\t\t\t\t\t\tconsole.log( 'THREE.AMFLoader: fflate missing and file is compressed.' );\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( file in zip ) {\n\n\t\t\t\t\tif ( file.toLowerCase().slice( - 4 ) === '.amf' ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconsole.log( 'THREE.AMFLoader: Trying to load file asset: ' + file );\n\t\t\t\tview = new DataView( zip[ file ].buffer );\n\n\t\t\t}\n\n\t\t\tconst fileText = new TextDecoder().decode( view );\n\t\t\tconst xmlData = new DOMParser().parseFromString( fileText, 'application/xml' );\n\n\t\t\tif ( xmlData.documentElement.nodeName.toLowerCase() !== 'amf' ) {\n\n\t\t\t\tconsole.log( 'THREE.AMFLoader: Error loading AMF - no AMF document found.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\treturn xmlData;\n\n\t\t}\n\n\t\tfunction loadDocumentScale( node ) {\n\n\t\t\tlet scale = 1.0;\n\t\t\tlet unit = 'millimeter';\n\n\t\t\tif ( node.documentElement.attributes.unit !== undefined ) {\n\n\t\t\t\tunit = node.documentElement.attributes.unit.value.toLowerCase();\n\n\t\t\t}\n\n\t\t\tconst scaleUnits = {\n\t\t\t\tmillimeter: 1.0,\n\t\t\t\tinch: 25.4,\n\t\t\t\tfeet: 304.8,\n\t\t\t\tmeter: 1000.0,\n\t\t\t\tmicron: 0.001\n\t\t\t};\n\n\t\t\tif ( scaleUnits[ unit ] !== undefined ) {\n\n\t\t\t\tscale = scaleUnits[ unit ];\n\n\t\t\t}\n\n\t\t\tconsole.log( 'THREE.AMFLoader: Unit scale: ' + scale );\n\t\t\treturn scale;\n\n\t\t}\n\n\t\tfunction loadMaterials( node ) {\n\n\t\t\tlet matName = 'AMF Material';\n\t\t\tconst matId = node.attributes.id.textContent;\n\t\t\tlet color = { r: 1.0, g: 1.0, b: 1.0, a: 1.0 };\n\n\t\t\tlet loadedMaterial = null;\n\n\t\t\tfor ( let i = 0; i < node.childNodes.length; i ++ ) {\n\n\t\t\t\tconst matChildEl = node.childNodes[ i ];\n\n\t\t\t\tif ( matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined ) {\n\n\t\t\t\t\tif ( matChildEl.attributes.type.value === 'name' ) {\n\n\t\t\t\t\t\tmatName = matChildEl.textContent;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( matChildEl.nodeName === 'color' ) {\n\n\t\t\t\t\tcolor = loadColor( matChildEl );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tloadedMaterial = new MeshPhongMaterial( {\n\t\t\t\tflatShading: true,\n\t\t\t\tcolor: new Color( color.r, color.g, color.b ),\n\t\t\t\tname: matName\n\t\t\t} );\n\n\t\t\tif ( color.a !== 1.0 ) {\n\n\t\t\t\tloadedMaterial.transparent = true;\n\t\t\t\tloadedMaterial.opacity = color.a;\n\n\t\t\t}\n\n\t\t\treturn { id: matId, material: loadedMaterial };\n\n\t\t}\n\n\t\tfunction loadColor( node ) {\n\n\t\t\tconst color = { r: 1.0, g: 1.0, b: 1.0, a: 1.0 };\n\n\t\t\tfor ( let i = 0; i < node.childNodes.length; i ++ ) {\n\n\t\t\t\tconst matColor = node.childNodes[ i ];\n\n\t\t\t\tif ( matColor.nodeName === 'r' ) {\n\n\t\t\t\t\tcolor.r = matColor.textContent;\n\n\t\t\t\t} else if ( matColor.nodeName === 'g' ) {\n\n\t\t\t\t\tcolor.g = matColor.textContent;\n\n\t\t\t\t} else if ( matColor.nodeName === 'b' ) {\n\n\t\t\t\t\tcolor.b = matColor.textContent;\n\n\t\t\t\t} else if ( matColor.nodeName === 'a' ) {\n\n\t\t\t\t\tcolor.a = matColor.textContent;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn color;\n\n\t\t}\n\n\t\tfunction loadMeshVolume( node ) {\n\n\t\t\tconst volume = { name: '', triangles: [], materialid: null };\n\n\t\t\tlet currVolumeNode = node.firstElementChild;\n\n\t\t\tif ( node.attributes.materialid !== undefined ) {\n\n\t\t\t\tvolume.materialId = node.attributes.materialid.nodeValue;\n\n\t\t\t}\n\n\t\t\twhile ( currVolumeNode ) {\n\n\t\t\t\tif ( currVolumeNode.nodeName === 'metadata' ) {\n\n\t\t\t\t\tif ( currVolumeNode.attributes.type !== undefined ) {\n\n\t\t\t\t\t\tif ( currVolumeNode.attributes.type.value === 'name' ) {\n\n\t\t\t\t\t\t\tvolume.name = currVolumeNode.textContent;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( currVolumeNode.nodeName === 'triangle' ) {\n\n\t\t\t\t\tconst v1 = currVolumeNode.getElementsByTagName( 'v1' )[ 0 ].textContent;\n\t\t\t\t\tconst v2 = currVolumeNode.getElementsByTagName( 'v2' )[ 0 ].textContent;\n\t\t\t\t\tconst v3 = currVolumeNode.getElementsByTagName( 'v3' )[ 0 ].textContent;\n\n\t\t\t\t\tvolume.triangles.push( v1, v2, v3 );\n\n\t\t\t\t}\n\n\t\t\t\tcurrVolumeNode = currVolumeNode.nextElementSibling;\n\n\t\t\t}\n\n\t\t\treturn volume;\n\n\t\t}\n\n\t\tfunction loadMeshVertices( node ) {\n\n\t\t\tconst vertArray = [];\n\t\t\tconst normalArray = [];\n\t\t\tlet currVerticesNode = node.firstElementChild;\n\n\t\t\twhile ( currVerticesNode ) {\n\n\t\t\t\tif ( currVerticesNode.nodeName === 'vertex' ) {\n\n\t\t\t\t\tlet vNode = currVerticesNode.firstElementChild;\n\n\t\t\t\t\twhile ( vNode ) {\n\n\t\t\t\t\t\tif ( vNode.nodeName === 'coordinates' ) {\n\n\t\t\t\t\t\t\tconst x = vNode.getElementsByTagName( 'x' )[ 0 ].textContent;\n\t\t\t\t\t\t\tconst y = vNode.getElementsByTagName( 'y' )[ 0 ].textContent;\n\t\t\t\t\t\t\tconst z = vNode.getElementsByTagName( 'z' )[ 0 ].textContent;\n\n\t\t\t\t\t\t\tvertArray.push( x, y, z );\n\n\t\t\t\t\t\t} else if ( vNode.nodeName === 'normal' ) {\n\n\t\t\t\t\t\t\tconst nx = vNode.getElementsByTagName( 'nx' )[ 0 ].textContent;\n\t\t\t\t\t\t\tconst ny = vNode.getElementsByTagName( 'ny' )[ 0 ].textContent;\n\t\t\t\t\t\t\tconst nz = vNode.getElementsByTagName( 'nz' )[ 0 ].textContent;\n\n\t\t\t\t\t\t\tnormalArray.push( nx, ny, nz );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvNode = vNode.nextElementSibling;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tcurrVerticesNode = currVerticesNode.nextElementSibling;\n\n\t\t\t}\n\n\t\t\treturn { 'vertices': vertArray, 'normals': normalArray };\n\n\t\t}\n\n\t\tfunction loadObject( node ) {\n\n\t\t\tconst objId = node.attributes.id.textContent;\n\t\t\tconst loadedObject = { name: 'amfobject', meshes: [] };\n\t\t\tlet currColor = null;\n\t\t\tlet currObjNode = node.firstElementChild;\n\n\t\t\twhile ( currObjNode ) {\n\n\t\t\t\tif ( currObjNode.nodeName === 'metadata' ) {\n\n\t\t\t\t\tif ( currObjNode.attributes.type !== undefined ) {\n\n\t\t\t\t\t\tif ( currObjNode.attributes.type.value === 'name' ) {\n\n\t\t\t\t\t\t\tloadedObject.name = currObjNode.textContent;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( currObjNode.nodeName === 'color' ) {\n\n\t\t\t\t\tcurrColor = loadColor( currObjNode );\n\n\t\t\t\t} else if ( currObjNode.nodeName === 'mesh' ) {\n\n\t\t\t\t\tlet currMeshNode = currObjNode.firstElementChild;\n\t\t\t\t\tconst mesh = { vertices: [], normals: [], volumes: [], color: currColor };\n\n\t\t\t\t\twhile ( currMeshNode ) {\n\n\t\t\t\t\t\tif ( currMeshNode.nodeName === 'vertices' ) {\n\n\t\t\t\t\t\t\tconst loadedVertices = loadMeshVertices( currMeshNode );\n\n\t\t\t\t\t\t\tmesh.normals = mesh.normals.concat( loadedVertices.normals );\n\t\t\t\t\t\t\tmesh.vertices = mesh.vertices.concat( loadedVertices.vertices );\n\n\t\t\t\t\t\t} else if ( currMeshNode.nodeName === 'volume' ) {\n\n\t\t\t\t\t\t\tmesh.volumes.push( loadMeshVolume( currMeshNode ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrMeshNode = currMeshNode.nextElementSibling;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tloadedObject.meshes.push( mesh );\n\n\t\t\t\t}\n\n\t\t\t\tcurrObjNode = currObjNode.nextElementSibling;\n\n\t\t\t}\n\n\t\t\treturn { 'id': objId, 'obj': loadedObject };\n\n\t\t}\n\n\t\tconst xmlData = loadDocument( data );\n\t\tlet amfName = '';\n\t\tlet amfAuthor = '';\n\t\tconst amfScale = loadDocumentScale( xmlData );\n\t\tconst amfMaterials = {};\n\t\tconst amfObjects = {};\n\t\tconst childNodes = xmlData.documentElement.childNodes;\n\n\t\tlet i, j;\n\n\t\tfor ( i = 0; i < childNodes.length; i ++ ) {\n\n\t\t\tconst child = childNodes[ i ];\n\n\t\t\tif ( child.nodeName === 'metadata' ) {\n\n\t\t\t\tif ( child.attributes.type !== undefined ) {\n\n\t\t\t\t\tif ( child.attributes.type.value === 'name' ) {\n\n\t\t\t\t\t\tamfName = child.textContent;\n\n\t\t\t\t\t} else if ( child.attributes.type.value === 'author' ) {\n\n\t\t\t\t\t\tamfAuthor = child.textContent;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( child.nodeName === 'material' ) {\n\n\t\t\t\tconst loadedMaterial = loadMaterials( child );\n\n\t\t\t\tamfMaterials[ loadedMaterial.id ] = loadedMaterial.material;\n\n\t\t\t} else if ( child.nodeName === 'object' ) {\n\n\t\t\t\tconst loadedObject = loadObject( child );\n\n\t\t\t\tamfObjects[ loadedObject.id ] = loadedObject.obj;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst sceneObject = new Group();\n\t\tconst defaultMaterial = new MeshPhongMaterial( {\n\t\t\tname: Loader.DEFAULT_MATERIAL_NAME,\n\t\t\tcolor: 0xaaaaff,\n\t\t\tflatShading: true\n\t\t} );\n\n\t\tsceneObject.name = amfName;\n\t\tsceneObject.userData.author = amfAuthor;\n\t\tsceneObject.userData.loader = 'AMF';\n\n\t\tfor ( const id in amfObjects ) {\n\n\t\t\tconst part = amfObjects[ id ];\n\t\t\tconst meshes = part.meshes;\n\t\t\tconst newObject = new Group();\n\t\t\tnewObject.name = part.name || '';\n\n\t\t\tfor ( i = 0; i < meshes.length; i ++ ) {\n\n\t\t\t\tlet objDefaultMaterial = defaultMaterial;\n\t\t\t\tconst mesh = meshes[ i ];\n\t\t\t\tconst vertices = new Float32BufferAttribute( mesh.vertices, 3 );\n\t\t\t\tlet normals = null;\n\n\t\t\t\tif ( mesh.normals.length ) {\n\n\t\t\t\t\tnormals = new Float32BufferAttribute( mesh.normals, 3 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( mesh.color ) {\n\n\t\t\t\t\tconst color = mesh.color;\n\n\t\t\t\t\tobjDefaultMaterial = defaultMaterial.clone();\n\t\t\t\t\tobjDefaultMaterial.color = new Color( color.r, color.g, color.b );\n\n\t\t\t\t\tif ( color.a !== 1.0 ) {\n\n\t\t\t\t\t\tobjDefaultMaterial.transparent = true;\n\t\t\t\t\t\tobjDefaultMaterial.opacity = color.a;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst volumes = mesh.volumes;\n\n\t\t\t\tfor ( j = 0; j < volumes.length; j ++ ) {\n\n\t\t\t\t\tconst volume = volumes[ j ];\n\t\t\t\t\tconst newGeometry = new BufferGeometry();\n\t\t\t\t\tlet material = objDefaultMaterial;\n\n\t\t\t\t\tnewGeometry.setIndex( volume.triangles );\n\t\t\t\t\tnewGeometry.setAttribute( 'position', vertices.clone() );\n\n\t\t\t\t\tif ( normals ) {\n\n\t\t\t\t\t\tnewGeometry.setAttribute( 'normal', normals.clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( amfMaterials[ volume.materialId ] !== undefined ) {\n\n\t\t\t\t\t\tmaterial = amfMaterials[ volume.materialId ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnewGeometry.scale( amfScale, amfScale, amfScale );\n\t\t\t\t\tnewObject.add( new Mesh( newGeometry, material.clone() ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tsceneObject.add( newObject );\n\n\t\t}\n\n\t\treturn sceneObject;\n\n\t}\n\n}\n\nexport { AMFLoader };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}